
c:/Users/vojen/Desktop/Studieting/IOT/Argon/IOT_project/IOTPlantWaterer/target/1.5.2/photon/IOTPlantWaterer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000013e4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1400  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a1404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000584  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a146c  080a146c  0002146c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1494  080a1494  00021494  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009407a  00000000  00000000  00021498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d865  00000000  00000000  000b5512  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e738  00000000  00000000  000c2d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ac8  00000000  00000000  000d14af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002aa0  00000000  00000000  000d2f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022f61  00000000  00000000  000d5a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f19f  00000000  00000000  000f8978  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a2f58  00000000  00000000  00117b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000aa74  00000000  00000000  001baa70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f83f 	bl	80a10b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f844 	bl	80a10c6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1404 	.word	0x080a1404
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	200005ec 	.word	0x200005ec
 80a0058:	200005ec 	.word	0x200005ec

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fb13 	bl	80a0688 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a13c8 	.word	0x080a13c8
 80a0084:	080a13f8 	.word	0x080a13f8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b811 	b.w	80a00ae <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f817 	bl	80a00c0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bab9 	b.w	80a060c <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 b9b5 	b.w	80a0408 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <setup>:
 * Date:
 */


// setup() runs once, when the device is first turned on.
void setup() {
 80a00ae:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(115200); // open serial port, set the baud rate as 9600 bps
 80a00b0:	f000 fbea 	bl	80a0888 <_Z16_fetch_usbserialv>

}
 80a00b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(115200); // open serial port, set the baud rate as 9600 bps
 80a00b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a00bc:	f000 bbca 	b.w	80a0854 <_ZN9USBSerial5beginEl>

080a00c0 <loop>:

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00c0:	b538      	push	{r3, r4, r5, lr}
  // The core of your code will likely live here.
  int val;
  val = analogRead(0); //connect sensor to Analog 0
 80a00c2:	2000      	movs	r0, #0
 80a00c4:	f000 fe0c 	bl	80a0ce0 <analogRead>
 80a00c8:	4604      	mov	r4, r0
  Serial.println(val); //print the value to serial port
 80a00ca:	f000 fbdd 	bl	80a0888 <_Z16_fetch_usbserialv>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a00ce:	2c00      	cmp	r4, #0
 80a00d0:	4605      	mov	r5, r0
 80a00d2:	da04      	bge.n	80a00de <loop+0x1e>
            t = print('-');
 80a00d4:	212d      	movs	r1, #45	; 0x2d
 80a00d6:	f000 fa01 	bl	80a04dc <_ZN5Print5printEc>
            val = -n;
 80a00da:	4261      	negs	r1, r4
 80a00dc:	e000      	b.n	80a00e0 <loop+0x20>
        } else {
            val = n;
 80a00de:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
 80a00e0:	220a      	movs	r2, #10
 80a00e2:	4628      	mov	r0, r5
 80a00e4:	f000 fa09 	bl	80a04fa <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 80a00e8:	4628      	mov	r0, r5
 80a00ea:	f000 f9fa 	bl	80a04e2 <_ZN5Print7printlnEv>
  delay(100);
 80a00ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void loop() {
  // The core of your code will likely live here.
  int val;
  val = analogRead(0); //connect sensor to Analog 0
  Serial.println(val); //print the value to serial port
  delay(100);
 80a00f2:	2064      	movs	r0, #100	; 0x64
 80a00f4:	f000 ba38 	b.w	80a0568 <delay>

080a00f8 <_GLOBAL__sub_I_setup>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a00f8:	f000 b800 	b.w	80a00fc <HAL_Pin_Map>

080a00fc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a00fc:	b508      	push	{r3, lr}
 80a00fe:	4b02      	ldr	r3, [pc, #8]	; (80a0108 <HAL_Pin_Map+0xc>)
 80a0100:	681b      	ldr	r3, [r3, #0]
 80a0102:	681b      	ldr	r3, [r3, #0]
 80a0104:	9301      	str	r3, [sp, #4]
 80a0106:	bd08      	pop	{r3, pc}
 80a0108:	080601b0 	.word	0x080601b0

080a010c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a010c:	b508      	push	{r3, lr}
 80a010e:	4b02      	ldr	r3, [pc, #8]	; (80a0118 <HAL_Validate_Pin_Function+0xc>)
 80a0110:	681b      	ldr	r3, [r3, #0]
 80a0112:	685b      	ldr	r3, [r3, #4]
 80a0114:	9301      	str	r3, [sp, #4]
 80a0116:	bd08      	pop	{r3, pc}
 80a0118:	080601b0 	.word	0x080601b0

080a011c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a011c:	b508      	push	{r3, lr}
 80a011e:	4b02      	ldr	r3, [pc, #8]	; (80a0128 <HAL_ADC_Read+0xc>)
 80a0120:	681b      	ldr	r3, [r3, #0]
 80a0122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0124:	9301      	str	r3, [sp, #4]
 80a0126:	bd08      	pop	{r3, pc}
 80a0128:	080601b0 	.word	0x080601b0

080a012c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a012c:	b508      	push	{r3, lr}
 80a012e:	4b02      	ldr	r3, [pc, #8]	; (80a0138 <HAL_SPI_Init+0xc>)
 80a0130:	681b      	ldr	r3, [r3, #0]
 80a0132:	69db      	ldr	r3, [r3, #28]
 80a0134:	9301      	str	r3, [sp, #4]
 80a0136:	bd08      	pop	{r3, pc}
 80a0138:	080601b4 	.word	0x080601b4

080a013c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a013c:	b508      	push	{r3, lr}
 80a013e:	4b02      	ldr	r3, [pc, #8]	; (80a0148 <HAL_SPI_Is_Enabled+0xc>)
 80a0140:	681b      	ldr	r3, [r3, #0]
 80a0142:	6a1b      	ldr	r3, [r3, #32]
 80a0144:	9301      	str	r3, [sp, #4]
 80a0146:	bd08      	pop	{r3, pc}
 80a0148:	080601b4 	.word	0x080601b4

080a014c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a014c:	b508      	push	{r3, lr}
 80a014e:	4b02      	ldr	r3, [pc, #8]	; (80a0158 <HAL_RNG_GetRandomNumber+0xc>)
 80a0150:	681b      	ldr	r3, [r3, #0]
 80a0152:	685b      	ldr	r3, [r3, #4]
 80a0154:	9301      	str	r3, [sp, #4]
 80a0156:	bd08      	pop	{r3, pc}
 80a0158:	0806019c 	.word	0x0806019c

080a015c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a015c:	b508      	push	{r3, lr}
 80a015e:	4b02      	ldr	r3, [pc, #8]	; (80a0168 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0160:	681b      	ldr	r3, [r3, #0]
 80a0162:	695b      	ldr	r3, [r3, #20]
 80a0164:	9301      	str	r3, [sp, #4]
 80a0166:	bd08      	pop	{r3, pc}
 80a0168:	0806019c 	.word	0x0806019c

080a016c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a016c:	b508      	push	{r3, lr}
 80a016e:	4b02      	ldr	r3, [pc, #8]	; (80a0178 <os_mutex_recursive_create+0xc>)
 80a0170:	681b      	ldr	r3, [r3, #0]
 80a0172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0174:	9301      	str	r3, [sp, #4]
 80a0176:	bd08      	pop	{r3, pc}
 80a0178:	080601d0 	.word	0x080601d0

080a017c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a017c:	b508      	push	{r3, lr}
 80a017e:	4b02      	ldr	r3, [pc, #8]	; (80a0188 <os_mutex_recursive_destroy+0xc>)
 80a0180:	681b      	ldr	r3, [r3, #0]
 80a0182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0184:	9301      	str	r3, [sp, #4]
 80a0186:	bd08      	pop	{r3, pc}
 80a0188:	080601d0 	.word	0x080601d0

080a018c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a018c:	b508      	push	{r3, lr}
 80a018e:	4b02      	ldr	r3, [pc, #8]	; (80a0198 <HAL_USART_Init+0xc>)
 80a0190:	681b      	ldr	r3, [r3, #0]
 80a0192:	699b      	ldr	r3, [r3, #24]
 80a0194:	9301      	str	r3, [sp, #4]
 80a0196:	bd08      	pop	{r3, pc}
 80a0198:	080601c4 	.word	0x080601c4

080a019c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a019c:	b508      	push	{r3, lr}
 80a019e:	4b02      	ldr	r3, [pc, #8]	; (80a01a8 <HAL_USART_Write_Data+0xc>)
 80a01a0:	681b      	ldr	r3, [r3, #0]
 80a01a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a01a4:	9301      	str	r3, [sp, #4]
 80a01a6:	bd08      	pop	{r3, pc}
 80a01a8:	080601c4 	.word	0x080601c4

080a01ac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a01ac:	b508      	push	{r3, lr}
 80a01ae:	4b02      	ldr	r3, [pc, #8]	; (80a01b8 <HAL_USART_Available_Data+0xc>)
 80a01b0:	681b      	ldr	r3, [r3, #0]
 80a01b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a01b4:	9301      	str	r3, [sp, #4]
 80a01b6:	bd08      	pop	{r3, pc}
 80a01b8:	080601c4 	.word	0x080601c4

080a01bc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a01bc:	b508      	push	{r3, lr}
 80a01be:	4b02      	ldr	r3, [pc, #8]	; (80a01c8 <HAL_USART_Read_Data+0xc>)
 80a01c0:	681b      	ldr	r3, [r3, #0]
 80a01c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a01c4:	9301      	str	r3, [sp, #4]
 80a01c6:	bd08      	pop	{r3, pc}
 80a01c8:	080601c4 	.word	0x080601c4

080a01cc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a01cc:	b508      	push	{r3, lr}
 80a01ce:	4b02      	ldr	r3, [pc, #8]	; (80a01d8 <HAL_USART_Peek_Data+0xc>)
 80a01d0:	681b      	ldr	r3, [r3, #0]
 80a01d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a01d4:	9301      	str	r3, [sp, #4]
 80a01d6:	bd08      	pop	{r3, pc}
 80a01d8:	080601c4 	.word	0x080601c4

080a01dc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a01dc:	b508      	push	{r3, lr}
 80a01de:	4b02      	ldr	r3, [pc, #8]	; (80a01e8 <HAL_USART_Flush_Data+0xc>)
 80a01e0:	681b      	ldr	r3, [r3, #0]
 80a01e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a01e4:	9301      	str	r3, [sp, #4]
 80a01e6:	bd08      	pop	{r3, pc}
 80a01e8:	080601c4 	.word	0x080601c4

080a01ec <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a01ec:	b508      	push	{r3, lr}
 80a01ee:	4b02      	ldr	r3, [pc, #8]	; (80a01f8 <HAL_USART_Is_Enabled+0xc>)
 80a01f0:	681b      	ldr	r3, [r3, #0]
 80a01f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a01f4:	9301      	str	r3, [sp, #4]
 80a01f6:	bd08      	pop	{r3, pc}
 80a01f8:	080601c4 	.word	0x080601c4

080a01fc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a01fc:	b508      	push	{r3, lr}
 80a01fe:	4b02      	ldr	r3, [pc, #8]	; (80a0208 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0200:	681b      	ldr	r3, [r3, #0]
 80a0202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0204:	9301      	str	r3, [sp, #4]
 80a0206:	bd08      	pop	{r3, pc}
 80a0208:	080601c4 	.word	0x080601c4

080a020c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a020c:	b508      	push	{r3, lr}
 80a020e:	4b02      	ldr	r3, [pc, #8]	; (80a0218 <HAL_I2C_Write_Data+0xc>)
 80a0210:	681b      	ldr	r3, [r3, #0]
 80a0212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0214:	9301      	str	r3, [sp, #4]
 80a0216:	bd08      	pop	{r3, pc}
 80a0218:	080601ac 	.word	0x080601ac

080a021c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a021c:	b508      	push	{r3, lr}
 80a021e:	4b02      	ldr	r3, [pc, #8]	; (80a0228 <HAL_I2C_Available_Data+0xc>)
 80a0220:	681b      	ldr	r3, [r3, #0]
 80a0222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0224:	9301      	str	r3, [sp, #4]
 80a0226:	bd08      	pop	{r3, pc}
 80a0228:	080601ac 	.word	0x080601ac

080a022c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a022c:	b508      	push	{r3, lr}
 80a022e:	4b02      	ldr	r3, [pc, #8]	; (80a0238 <HAL_I2C_Read_Data+0xc>)
 80a0230:	681b      	ldr	r3, [r3, #0]
 80a0232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0234:	9301      	str	r3, [sp, #4]
 80a0236:	bd08      	pop	{r3, pc}
 80a0238:	080601ac 	.word	0x080601ac

080a023c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a023c:	b508      	push	{r3, lr}
 80a023e:	4b02      	ldr	r3, [pc, #8]	; (80a0248 <HAL_I2C_Peek_Data+0xc>)
 80a0240:	681b      	ldr	r3, [r3, #0]
 80a0242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0244:	9301      	str	r3, [sp, #4]
 80a0246:	bd08      	pop	{r3, pc}
 80a0248:	080601ac 	.word	0x080601ac

080a024c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a024c:	b508      	push	{r3, lr}
 80a024e:	4b02      	ldr	r3, [pc, #8]	; (80a0258 <HAL_I2C_Flush_Data+0xc>)
 80a0250:	681b      	ldr	r3, [r3, #0]
 80a0252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0254:	9301      	str	r3, [sp, #4]
 80a0256:	bd08      	pop	{r3, pc}
 80a0258:	080601ac 	.word	0x080601ac

080a025c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a025c:	b508      	push	{r3, lr}
 80a025e:	4b02      	ldr	r3, [pc, #8]	; (80a0268 <HAL_I2C_Is_Enabled+0xc>)
 80a0260:	681b      	ldr	r3, [r3, #0]
 80a0262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0264:	9301      	str	r3, [sp, #4]
 80a0266:	bd08      	pop	{r3, pc}
 80a0268:	080601ac 	.word	0x080601ac

080a026c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a026c:	b508      	push	{r3, lr}
 80a026e:	4b03      	ldr	r3, [pc, #12]	; (80a027c <HAL_I2C_Init+0x10>)
 80a0270:	681b      	ldr	r3, [r3, #0]
 80a0272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0276:	9301      	str	r3, [sp, #4]
 80a0278:	bd08      	pop	{r3, pc}
 80a027a:	0000      	.short	0x0000
 80a027c:	080601ac 	.word	0x080601ac

080a0280 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0280:	b508      	push	{r3, lr}
 80a0282:	4b02      	ldr	r3, [pc, #8]	; (80a028c <HAL_USB_USART_Init+0xc>)
 80a0284:	681b      	ldr	r3, [r3, #0]
 80a0286:	681b      	ldr	r3, [r3, #0]
 80a0288:	9301      	str	r3, [sp, #4]
 80a028a:	bd08      	pop	{r3, pc}
 80a028c:	080601d8 	.word	0x080601d8

080a0290 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0290:	b508      	push	{r3, lr}
 80a0292:	4b02      	ldr	r3, [pc, #8]	; (80a029c <HAL_USB_USART_Begin+0xc>)
 80a0294:	681b      	ldr	r3, [r3, #0]
 80a0296:	685b      	ldr	r3, [r3, #4]
 80a0298:	9301      	str	r3, [sp, #4]
 80a029a:	bd08      	pop	{r3, pc}
 80a029c:	080601d8 	.word	0x080601d8

080a02a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a02a0:	b508      	push	{r3, lr}
 80a02a2:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <HAL_USB_USART_Available_Data+0xc>)
 80a02a4:	681b      	ldr	r3, [r3, #0]
 80a02a6:	691b      	ldr	r3, [r3, #16]
 80a02a8:	9301      	str	r3, [sp, #4]
 80a02aa:	bd08      	pop	{r3, pc}
 80a02ac:	080601d8 	.word	0x080601d8

080a02b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a02b0:	b508      	push	{r3, lr}
 80a02b2:	4b02      	ldr	r3, [pc, #8]	; (80a02bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a02b4:	681b      	ldr	r3, [r3, #0]
 80a02b6:	695b      	ldr	r3, [r3, #20]
 80a02b8:	9301      	str	r3, [sp, #4]
 80a02ba:	bd08      	pop	{r3, pc}
 80a02bc:	080601d8 	.word	0x080601d8

080a02c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02c0:	b508      	push	{r3, lr}
 80a02c2:	4b02      	ldr	r3, [pc, #8]	; (80a02cc <HAL_USB_USART_Receive_Data+0xc>)
 80a02c4:	681b      	ldr	r3, [r3, #0]
 80a02c6:	699b      	ldr	r3, [r3, #24]
 80a02c8:	9301      	str	r3, [sp, #4]
 80a02ca:	bd08      	pop	{r3, pc}
 80a02cc:	080601d8 	.word	0x080601d8

080a02d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02d0:	b508      	push	{r3, lr}
 80a02d2:	4b02      	ldr	r3, [pc, #8]	; (80a02dc <HAL_USB_USART_Send_Data+0xc>)
 80a02d4:	681b      	ldr	r3, [r3, #0]
 80a02d6:	69db      	ldr	r3, [r3, #28]
 80a02d8:	9301      	str	r3, [sp, #4]
 80a02da:	bd08      	pop	{r3, pc}
 80a02dc:	080601d8 	.word	0x080601d8

080a02e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <HAL_USB_USART_Flush_Data+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	6a1b      	ldr	r3, [r3, #32]
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601d8 	.word	0x080601d8

080a02f0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b02      	ldr	r3, [pc, #8]	; (80a02fc <inet_gethostbyname+0xc>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a02f8:	9301      	str	r3, [sp, #4]
 80a02fa:	bd08      	pop	{r3, pc}
 80a02fc:	080601c0 	.word	0x080601c0

080a0300 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <set_system_mode+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	685b      	ldr	r3, [r3, #4]
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601a4 	.word	0x080601a4

080a0310 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <system_delay_ms+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	695b      	ldr	r3, [r3, #20]
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601a4 	.word	0x080601a4

080a0320 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b03      	ldr	r3, [pc, #12]	; (80a0330 <system_ctrl_set_app_request_handler+0x10>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a032a:	9301      	str	r3, [sp, #4]
 80a032c:	bd08      	pop	{r3, pc}
 80a032e:	0000      	.short	0x0000
 80a0330:	080601a4 	.word	0x080601a4

080a0334 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b03      	ldr	r3, [pc, #12]	; (80a0344 <system_ctrl_set_result+0x10>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a033e:	9301      	str	r3, [sp, #4]
 80a0340:	bd08      	pop	{r3, pc}
 80a0342:	0000      	.short	0x0000
 80a0344:	080601a4 	.word	0x080601a4

080a0348 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <network_connect+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	685b      	ldr	r3, [r3, #4]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601c8 	.word	0x080601c8

080a0358 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <network_connecting+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	689b      	ldr	r3, [r3, #8]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601c8 	.word	0x080601c8

080a0368 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <network_disconnect+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	68db      	ldr	r3, [r3, #12]
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601c8 	.word	0x080601c8

080a0378 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <network_ready+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	691b      	ldr	r3, [r3, #16]
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601c8 	.word	0x080601c8

080a0388 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <network_on+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	695b      	ldr	r3, [r3, #20]
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601c8 	.word	0x080601c8

080a0398 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <network_off+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	699b      	ldr	r3, [r3, #24]
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601c8 	.word	0x080601c8

080a03a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <network_listen+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	69db      	ldr	r3, [r3, #28]
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601c8 	.word	0x080601c8

080a03b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <network_listening+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	6a1b      	ldr	r3, [r3, #32]
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601c8 	.word	0x080601c8

080a03c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <network_set_listen_timeout+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601c8 	.word	0x080601c8

080a03d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <network_get_listen_timeout+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601c8 	.word	0x080601c8

080a03e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b02      	ldr	r3, [pc, #8]	; (80a03f4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a03f0:	9301      	str	r3, [sp, #4]
 80a03f2:	bd08      	pop	{r3, pc}
 80a03f4:	080601cc 	.word	0x080601cc

080a03f8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a03f8:	b508      	push	{r3, lr}
 80a03fa:	4b02      	ldr	r3, [pc, #8]	; (80a0404 <malloc+0xc>)
 80a03fc:	681b      	ldr	r3, [r3, #0]
 80a03fe:	681b      	ldr	r3, [r3, #0]
 80a0400:	9301      	str	r3, [sp, #4]
 80a0402:	bd08      	pop	{r3, pc}
 80a0404:	080601a0 	.word	0x080601a0

080a0408 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0408:	b508      	push	{r3, lr}
 80a040a:	4b02      	ldr	r3, [pc, #8]	; (80a0414 <free+0xc>)
 80a040c:	681b      	ldr	r3, [r3, #0]
 80a040e:	685b      	ldr	r3, [r3, #4]
 80a0410:	9301      	str	r3, [sp, #4]
 80a0412:	bd08      	pop	{r3, pc}
 80a0414:	080601a0 	.word	0x080601a0

080a0418 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0418:	b570      	push	{r4, r5, r6, lr}
 80a041a:	4604      	mov	r4, r0
 80a041c:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a041e:	2500      	movs	r5, #0
 80a0420:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0424:	f7ff fea2 	bl	80a016c <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0428:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a042a:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a042c:	f7ff fe7e 	bl	80a012c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0430:	6065      	str	r5, [r4, #4]
}
 80a0432:	4620      	mov	r0, r4
 80a0434:	bd70      	pop	{r4, r5, r6, pc}

080a0436 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a0436:	7800      	ldrb	r0, [r0, #0]
 80a0438:	f7ff be80 	b.w	80a013c <HAL_SPI_Is_Enabled>

080a043c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a043c:	b510      	push	{r4, lr}
 80a043e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0440:	6800      	ldr	r0, [r0, #0]
 80a0442:	b118      	cbz	r0, 80a044c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0444:	f7ff ffe0 	bl	80a0408 <free>
            wakeupSource_ = nullptr;
 80a0448:	2300      	movs	r3, #0
 80a044a:	6023      	str	r3, [r4, #0]
 80a044c:	bd10      	pop	{r4, pc}

080a044e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a044e:	b510      	push	{r4, lr}
 80a0450:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a0452:	f7ff fff3 	bl	80a043c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0456:	4620      	mov	r0, r4
 80a0458:	bd10      	pop	{r4, pc}
	...

080a045c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a045c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0460:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0462:	4c08      	ldr	r4, [pc, #32]	; (80a0484 <_GLOBAL__sub_I_System+0x28>)
 80a0464:	2000      	movs	r0, #0
 80a0466:	6020      	str	r0, [r4, #0]
 80a0468:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a046a:	71a0      	strb	r0, [r4, #6]
 80a046c:	8120      	strh	r0, [r4, #8]
 80a046e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0470:	f7ff ff46 	bl	80a0300 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0474:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a047a:	4a03      	ldr	r2, [pc, #12]	; (80a0488 <_GLOBAL__sub_I_System+0x2c>)
 80a047c:	4903      	ldr	r1, [pc, #12]	; (80a048c <_GLOBAL__sub_I_System+0x30>)
 80a047e:	f000 bc9f 	b.w	80a0dc0 <__aeabi_atexit>
 80a0482:	bf00      	nop
 80a0484:	2000006c 	.word	0x2000006c
 80a0488:	20000068 	.word	0x20000068
 80a048c:	080a044f 	.word	0x080a044f

080a0490 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0492:	4606      	mov	r6, r0
 80a0494:	460d      	mov	r5, r1
 80a0496:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0498:	2400      	movs	r4, #0
  while (size--) {
 80a049a:	42bd      	cmp	r5, r7
 80a049c:	d00c      	beq.n	80a04b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a049e:	6833      	ldr	r3, [r6, #0]
 80a04a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a04a4:	689b      	ldr	r3, [r3, #8]
 80a04a6:	4630      	mov	r0, r6
 80a04a8:	4798      	blx	r3
     if (chunk>=0)
 80a04aa:	2800      	cmp	r0, #0
 80a04ac:	db01      	blt.n	80a04b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a04ae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a04b0:	e7f3      	b.n	80a049a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a04b2:	2c00      	cmp	r4, #0
 80a04b4:	bf08      	it	eq
 80a04b6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a04b8:	4620      	mov	r0, r4
 80a04ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a04bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a04bc:	b570      	push	{r4, r5, r6, lr}
 80a04be:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a04c0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a04c2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a04c4:	b149      	cbz	r1, 80a04da <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a04c6:	f000 fe2f 	bl	80a1128 <strlen>
 80a04ca:	682b      	ldr	r3, [r5, #0]
 80a04cc:	4602      	mov	r2, r0
 80a04ce:	4621      	mov	r1, r4
 80a04d0:	4628      	mov	r0, r5
    }
 80a04d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a04d6:	68db      	ldr	r3, [r3, #12]
 80a04d8:	4718      	bx	r3
    }
 80a04da:	bd70      	pop	{r4, r5, r6, pc}

080a04dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a04dc:	6803      	ldr	r3, [r0, #0]
 80a04de:	689b      	ldr	r3, [r3, #8]
 80a04e0:	4718      	bx	r3

080a04e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a04e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a04e4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a04e6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a04e8:	f7ff fff8 	bl	80a04dc <_ZN5Print5printEc>
  n += print('\n');
 80a04ec:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a04ee:	4604      	mov	r4, r0
  n += print('\n');
 80a04f0:	4628      	mov	r0, r5
 80a04f2:	f7ff fff3 	bl	80a04dc <_ZN5Print5printEc>
  return n;
}
 80a04f6:	4420      	add	r0, r4
 80a04f8:	bd38      	pop	{r3, r4, r5, pc}

080a04fa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a04fa:	2a01      	cmp	r2, #1
 80a04fc:	bf98      	it	ls
 80a04fe:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0500:	b530      	push	{r4, r5, lr}
 80a0502:	460b      	mov	r3, r1
 80a0504:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0506:	2100      	movs	r1, #0
 80a0508:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a050c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0510:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0514:	fb05 3312 	mls	r3, r5, r2, r3
 80a0518:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a051a:	2b09      	cmp	r3, #9
 80a051c:	bf94      	ite	ls
 80a051e:	3330      	addls	r3, #48	; 0x30
 80a0520:	3337      	addhi	r3, #55	; 0x37
 80a0522:	b2db      	uxtb	r3, r3
 80a0524:	4621      	mov	r1, r4
 80a0526:	f804 3901 	strb.w	r3, [r4], #-1
 80a052a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a052c:	2d00      	cmp	r5, #0
 80a052e:	d1ef      	bne.n	80a0510 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0530:	f7ff ffc4 	bl	80a04bc <_ZN5Print5writeEPKc>
}
 80a0534:	b00b      	add	sp, #44	; 0x2c
 80a0536:	bd30      	pop	{r4, r5, pc}

080a0538 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0538:	2300      	movs	r3, #0
 80a053a:	461a      	mov	r2, r3
 80a053c:	4619      	mov	r1, r3
 80a053e:	6840      	ldr	r0, [r0, #4]
 80a0540:	f7ff bf22 	b.w	80a0388 <network_on>

080a0544 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0544:	4a01      	ldr	r2, [pc, #4]	; (80a054c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0548:	601a      	str	r2, [r3, #0]
 80a054a:	4770      	bx	lr
 80a054c:	080a11c2 	.word	0x080a11c2
 80a0550:	20000078 	.word	0x20000078

080a0554 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0554:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0556:	681a      	ldr	r2, [r3, #0]
 80a0558:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a055a:	601a      	str	r2, [r3, #0]
 80a055c:	4770      	bx	lr
 80a055e:	bf00      	nop
 80a0560:	20000000 	.word	0x20000000
 80a0564:	2000007c 	.word	0x2000007c

080a0568 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0568:	2100      	movs	r1, #0
 80a056a:	f7ff bed1 	b.w	80a0310 <system_delay_ms>

080a056e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a056e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0570:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0572:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0574:	b113      	cbz	r3, 80a057c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0576:	2203      	movs	r2, #3
 80a0578:	4601      	mov	r1, r0
 80a057a:	4798      	blx	r3
    }
 80a057c:	4620      	mov	r0, r4
 80a057e:	bd10      	pop	{r4, pc}

080a0580 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0580:	b510      	push	{r4, lr}
 80a0582:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0584:	f7ff fff3 	bl	80a056e <_ZNSt14_Function_baseD1Ev>
 80a0588:	4620      	mov	r0, r4
 80a058a:	bd10      	pop	{r4, pc}

080a058c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a058c:	4803      	ldr	r0, [pc, #12]	; (80a059c <_GLOBAL__sub_I_RGB+0x10>)
 80a058e:	2300      	movs	r3, #0
 80a0590:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0592:	4a03      	ldr	r2, [pc, #12]	; (80a05a0 <_GLOBAL__sub_I_RGB+0x14>)
 80a0594:	4903      	ldr	r1, [pc, #12]	; (80a05a4 <_GLOBAL__sub_I_RGB+0x18>)
 80a0596:	f000 bc13 	b.w	80a0dc0 <__aeabi_atexit>
 80a059a:	bf00      	nop
 80a059c:	20000080 	.word	0x20000080
 80a05a0:	20000068 	.word	0x20000068
 80a05a4:	080a0581 	.word	0x080a0581

080a05a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a05a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a05aa:	4b14      	ldr	r3, [pc, #80]	; (80a05fc <serialEventRun+0x54>)
 80a05ac:	b133      	cbz	r3, 80a05bc <serialEventRun+0x14>
 80a05ae:	f000 f96b 	bl	80a0888 <_Z16_fetch_usbserialv>
 80a05b2:	6803      	ldr	r3, [r0, #0]
 80a05b4:	691b      	ldr	r3, [r3, #16]
 80a05b6:	4798      	blx	r3
 80a05b8:	2800      	cmp	r0, #0
 80a05ba:	dc16      	bgt.n	80a05ea <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a05bc:	4b10      	ldr	r3, [pc, #64]	; (80a0600 <serialEventRun+0x58>)
 80a05be:	b133      	cbz	r3, 80a05ce <serialEventRun+0x26>
 80a05c0:	f000 fa20 	bl	80a0a04 <_Z22__fetch_global_Serial1v>
 80a05c4:	6803      	ldr	r3, [r0, #0]
 80a05c6:	691b      	ldr	r3, [r3, #16]
 80a05c8:	4798      	blx	r3
 80a05ca:	2800      	cmp	r0, #0
 80a05cc:	dc10      	bgt.n	80a05f0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a05ce:	4b0d      	ldr	r3, [pc, #52]	; (80a0604 <serialEventRun+0x5c>)
 80a05d0:	b10b      	cbz	r3, 80a05d6 <serialEventRun+0x2e>
 80a05d2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a05d6:	4b0c      	ldr	r3, [pc, #48]	; (80a0608 <serialEventRun+0x60>)
 80a05d8:	b17b      	cbz	r3, 80a05fa <serialEventRun+0x52>
 80a05da:	f000 f991 	bl	80a0900 <_Z17_fetch_usbserial1v>
 80a05de:	6803      	ldr	r3, [r0, #0]
 80a05e0:	691b      	ldr	r3, [r3, #16]
 80a05e2:	4798      	blx	r3
 80a05e4:	2800      	cmp	r0, #0
 80a05e6:	dc06      	bgt.n	80a05f6 <serialEventRun+0x4e>
 80a05e8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a05ea:	f3af 8000 	nop.w
 80a05ee:	e7e5      	b.n	80a05bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a05f0:	f3af 8000 	nop.w
 80a05f4:	e7eb      	b.n	80a05ce <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a05f6:	f3af 8000 	nop.w
 80a05fa:	bd08      	pop	{r3, pc}
	...

080a060c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a060c:	b508      	push	{r3, lr}
	serialEventRun();
 80a060e:	f7ff ffcb 	bl	80a05a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0612:	f7ff fda3 	bl	80a015c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0616:	4b01      	ldr	r3, [pc, #4]	; (80a061c <_post_loop+0x10>)
 80a0618:	6018      	str	r0, [r3, #0]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	20000514 	.word	0x20000514

080a0620 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0620:	4802      	ldr	r0, [pc, #8]	; (80a062c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0622:	4a03      	ldr	r2, [pc, #12]	; (80a0630 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0624:	4903      	ldr	r1, [pc, #12]	; (80a0634 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0626:	1a12      	subs	r2, r2, r0
 80a0628:	f000 bd42 	b.w	80a10b0 <memcpy>
 80a062c:	40024000 	.word	0x40024000
 80a0630:	40024004 	.word	0x40024004
 80a0634:	080a1400 	.word	0x080a1400

080a0638 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0638:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a063a:	2300      	movs	r3, #0
 80a063c:	9300      	str	r3, [sp, #0]
 80a063e:	461a      	mov	r2, r3
 80a0640:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0644:	f7ff fe76 	bl	80a0334 <system_ctrl_set_result>
}
 80a0648:	b003      	add	sp, #12
 80a064a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0650 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0650:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0652:	8843      	ldrh	r3, [r0, #2]
 80a0654:	2b0a      	cmp	r3, #10
 80a0656:	d008      	beq.n	80a066a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0658:	2b50      	cmp	r3, #80	; 0x50
 80a065a:	d109      	bne.n	80a0670 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a065c:	4b09      	ldr	r3, [pc, #36]	; (80a0684 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a065e:	681b      	ldr	r3, [r3, #0]
 80a0660:	b13b      	cbz	r3, 80a0672 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0662:	b003      	add	sp, #12
 80a0664:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0668:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a066a:	f7ff ffe5 	bl	80a0638 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a066e:	e006      	b.n	80a067e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0670:	2300      	movs	r3, #0
 80a0672:	9300      	str	r3, [sp, #0]
 80a0674:	461a      	mov	r2, r3
 80a0676:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a067a:	f7ff fe5b 	bl	80a0334 <system_ctrl_set_result>
        break;
    }
}
 80a067e:	b003      	add	sp, #12
 80a0680:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0684:	20000090 	.word	0x20000090

080a0688 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0688:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a068a:	4c10      	ldr	r4, [pc, #64]	; (80a06cc <module_user_init_hook+0x44>)
 80a068c:	4d10      	ldr	r5, [pc, #64]	; (80a06d0 <module_user_init_hook+0x48>)
 80a068e:	6823      	ldr	r3, [r4, #0]
 80a0690:	42ab      	cmp	r3, r5
 80a0692:	4b10      	ldr	r3, [pc, #64]	; (80a06d4 <module_user_init_hook+0x4c>)
 80a0694:	bf0c      	ite	eq
 80a0696:	2201      	moveq	r2, #1
 80a0698:	2200      	movne	r2, #0
 80a069a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a069c:	d002      	beq.n	80a06a4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a069e:	f7ff ffbf 	bl	80a0620 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a06a2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a06a4:	f7ff fd52 	bl	80a014c <HAL_RNG_GetRandomNumber>
 80a06a8:	4604      	mov	r4, r0
    srand(seed);
 80a06aa:	f000 fd15 	bl	80a10d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a06ae:	4b0a      	ldr	r3, [pc, #40]	; (80a06d8 <module_user_init_hook+0x50>)
 80a06b0:	b113      	cbz	r3, 80a06b8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a06b2:	4620      	mov	r0, r4
 80a06b4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a06b8:	2100      	movs	r1, #0
 80a06ba:	4807      	ldr	r0, [pc, #28]	; (80a06d8 <module_user_init_hook+0x50>)
 80a06bc:	f7ff fe94 	bl	80a03e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a06c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a06c4:	2100      	movs	r1, #0
 80a06c6:	4805      	ldr	r0, [pc, #20]	; (80a06dc <module_user_init_hook+0x54>)
 80a06c8:	f7ff be2a 	b.w	80a0320 <system_ctrl_set_app_request_handler>
 80a06cc:	40024000 	.word	0x40024000
 80a06d0:	9a271c1e 	.word	0x9a271c1e
 80a06d4:	20000094 	.word	0x20000094
 80a06d8:	00000000 	.word	0x00000000
 80a06dc:	080a0651 	.word	0x080a0651

080a06e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a06e0:	4770      	bx	lr

080a06e2 <_ZN9IPAddressD0Ev>:
 80a06e2:	b510      	push	{r4, lr}
 80a06e4:	4604      	mov	r4, r0
 80a06e6:	2118      	movs	r1, #24
 80a06e8:	f000 fb78 	bl	80a0ddc <_ZdlPvj>
 80a06ec:	4620      	mov	r0, r4
 80a06ee:	bd10      	pop	{r4, pc}

080a06f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a06f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06f2:	460f      	mov	r7, r1
 80a06f4:	f100 0608 	add.w	r6, r0, #8
 80a06f8:	1d05      	adds	r5, r0, #4
 80a06fa:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a06fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0700:	220a      	movs	r2, #10
 80a0702:	4638      	mov	r0, r7
 80a0704:	f7ff fef9 	bl	80a04fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0708:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a070a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a070c:	d007      	beq.n	80a071e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a070e:	2c00      	cmp	r4, #0
 80a0710:	d0f4      	beq.n	80a06fc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0712:	212e      	movs	r1, #46	; 0x2e
 80a0714:	4638      	mov	r0, r7
 80a0716:	f7ff fee1 	bl	80a04dc <_ZN5Print5printEc>
 80a071a:	4404      	add	r4, r0
 80a071c:	e7ee      	b.n	80a06fc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a071e:	4620      	mov	r0, r4
 80a0720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0724 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0724:	b510      	push	{r4, lr}
 80a0726:	4604      	mov	r4, r0
 80a0728:	4b04      	ldr	r3, [pc, #16]	; (80a073c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a072a:	2211      	movs	r2, #17
 80a072c:	f840 3b04 	str.w	r3, [r0], #4
 80a0730:	2100      	movs	r1, #0
 80a0732:	f000 fcc8 	bl	80a10c6 <memset>
{
    clear();
}
 80a0736:	4620      	mov	r0, r4
 80a0738:	bd10      	pop	{r4, pc}
 80a073a:	bf00      	nop
 80a073c:	080a1264 	.word	0x080a1264

080a0740 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0740:	4603      	mov	r3, r0
 80a0742:	4a07      	ldr	r2, [pc, #28]	; (80a0760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0744:	b510      	push	{r4, lr}
 80a0746:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a074a:	f101 0210 	add.w	r2, r1, #16
 80a074e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0752:	4291      	cmp	r1, r2
 80a0754:	f843 4b04 	str.w	r4, [r3], #4
 80a0758:	d1f9      	bne.n	80a074e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a075a:	780a      	ldrb	r2, [r1, #0]
 80a075c:	701a      	strb	r2, [r3, #0]
}
 80a075e:	bd10      	pop	{r4, pc}
 80a0760:	080a1264 	.word	0x080a1264

080a0764 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0764:	4a02      	ldr	r2, [pc, #8]	; (80a0770 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0766:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0768:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a076a:	2204      	movs	r2, #4
 80a076c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a076e:	4770      	bx	lr
 80a0770:	080a1264 	.word	0x080a1264

080a0774 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0774:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0776:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a077a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a077e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0782:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0786:	2304      	movs	r3, #4
 80a0788:	6041      	str	r1, [r0, #4]
 80a078a:	7503      	strb	r3, [r0, #20]
 80a078c:	bd10      	pop	{r4, pc}
	...

080a0790 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0792:	4d04      	ldr	r5, [pc, #16]	; (80a07a4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0794:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0796:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a079a:	9500      	str	r5, [sp, #0]
 80a079c:	f7ff ffea 	bl	80a0774 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a07a0:	b003      	add	sp, #12
 80a07a2:	bd30      	pop	{r4, r5, pc}
 80a07a4:	080a1264 	.word	0x080a1264

080a07a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a07a8:	7441      	strb	r1, [r0, #17]
 80a07aa:	4770      	bx	lr

080a07ac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a07ac:	4770      	bx	lr

080a07ae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a07ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a07b0:	2100      	movs	r1, #0
 80a07b2:	7c00      	ldrb	r0, [r0, #16]
 80a07b4:	f7ff fd84 	bl	80a02c0 <HAL_USB_USART_Receive_Data>
}
 80a07b8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a07bc:	bf28      	it	cs
 80a07be:	f04f 30ff 	movcs.w	r0, #4294967295
 80a07c2:	bd08      	pop	{r3, pc}

080a07c4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a07c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a07c6:	2101      	movs	r1, #1
 80a07c8:	7c00      	ldrb	r0, [r0, #16]
 80a07ca:	f7ff fd79 	bl	80a02c0 <HAL_USB_USART_Receive_Data>
}
 80a07ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a07d2:	bf28      	it	cs
 80a07d4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a07d8:	bd08      	pop	{r3, pc}

080a07da <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a07da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a07dc:	7c00      	ldrb	r0, [r0, #16]
 80a07de:	f7ff fd67 	bl	80a02b0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a07e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07e6:	bd08      	pop	{r3, pc}

080a07e8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a07e8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a07ea:	7c00      	ldrb	r0, [r0, #16]
 80a07ec:	f7ff fd58 	bl	80a02a0 <HAL_USB_USART_Available_Data>
}
 80a07f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07f4:	bd08      	pop	{r3, pc}

080a07f6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a07f6:	7c00      	ldrb	r0, [r0, #16]
 80a07f8:	f7ff bd72 	b.w	80a02e0 <HAL_USB_USART_Flush_Data>

080a07fc <_ZN9USBSerialD0Ev>:
 80a07fc:	b510      	push	{r4, lr}
 80a07fe:	4604      	mov	r4, r0
 80a0800:	2114      	movs	r1, #20
 80a0802:	f000 faeb 	bl	80a0ddc <_ZdlPvj>
 80a0806:	4620      	mov	r0, r4
 80a0808:	bd10      	pop	{r4, pc}

080a080a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a080a:	b538      	push	{r3, r4, r5, lr}
 80a080c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a080e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0810:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0812:	f7ff fd4d 	bl	80a02b0 <HAL_USB_USART_Available_Data_For_Write>
 80a0816:	2800      	cmp	r0, #0
 80a0818:	dc01      	bgt.n	80a081e <_ZN9USBSerial5writeEh+0x14>
 80a081a:	7c60      	ldrb	r0, [r4, #17]
 80a081c:	b128      	cbz	r0, 80a082a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a081e:	4629      	mov	r1, r5
 80a0820:	7c20      	ldrb	r0, [r4, #16]
 80a0822:	f7ff fd55 	bl	80a02d0 <HAL_USB_USART_Send_Data>
 80a0826:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a082a:	bd38      	pop	{r3, r4, r5, pc}

080a082c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a082c:	b510      	push	{r4, lr}
 80a082e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0830:	2300      	movs	r3, #0
 80a0832:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0838:	60a3      	str	r3, [r4, #8]
 80a083a:	4b05      	ldr	r3, [pc, #20]	; (80a0850 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a083c:	4608      	mov	r0, r1
 80a083e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0840:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0842:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0844:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0846:	4611      	mov	r1, r2
 80a0848:	f7ff fd1a 	bl	80a0280 <HAL_USB_USART_Init>
}
 80a084c:	4620      	mov	r0, r4
 80a084e:	bd10      	pop	{r4, pc}
 80a0850:	080a1278 	.word	0x080a1278

080a0854 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0854:	2200      	movs	r2, #0
 80a0856:	7c00      	ldrb	r0, [r0, #16]
 80a0858:	f7ff bd1a 	b.w	80a0290 <HAL_USB_USART_Begin>

080a085c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a085c:	b510      	push	{r4, lr}
 80a085e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0860:	2214      	movs	r2, #20
 80a0862:	2100      	movs	r1, #0
 80a0864:	f000 fc2f 	bl	80a10c6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0868:	4b05      	ldr	r3, [pc, #20]	; (80a0880 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a086a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a086c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a086e:	4b05      	ldr	r3, [pc, #20]	; (80a0884 <_Z19acquireSerialBufferv+0x28>)
 80a0870:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0872:	f240 1301 	movw	r3, #257	; 0x101
 80a0876:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0878:	2381      	movs	r3, #129	; 0x81
 80a087a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a087c:	bd10      	pop	{r4, pc}
 80a087e:	bf00      	nop
 80a0880:	2000011d 	.word	0x2000011d
 80a0884:	2000009c 	.word	0x2000009c

080a0888 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0888:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a088a:	4d0e      	ldr	r5, [pc, #56]	; (80a08c4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a088c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a088e:	a801      	add	r0, sp, #4
 80a0890:	f7ff ffe4 	bl	80a085c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0894:	6829      	ldr	r1, [r5, #0]
 80a0896:	f011 0401 	ands.w	r4, r1, #1
 80a089a:	d110      	bne.n	80a08be <_Z16_fetch_usbserialv+0x36>
 80a089c:	4628      	mov	r0, r5
 80a089e:	f7ff fbfe 	bl	80a009e <__cxa_guard_acquire>
 80a08a2:	b160      	cbz	r0, 80a08be <_Z16_fetch_usbserialv+0x36>
 80a08a4:	aa01      	add	r2, sp, #4
 80a08a6:	4621      	mov	r1, r4
 80a08a8:	4807      	ldr	r0, [pc, #28]	; (80a08c8 <_Z16_fetch_usbserialv+0x40>)
 80a08aa:	f7ff ffbf 	bl	80a082c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a08ae:	4628      	mov	r0, r5
 80a08b0:	f7ff fbfa 	bl	80a00a8 <__cxa_guard_release>
 80a08b4:	4a05      	ldr	r2, [pc, #20]	; (80a08cc <_Z16_fetch_usbserialv+0x44>)
 80a08b6:	4906      	ldr	r1, [pc, #24]	; (80a08d0 <_Z16_fetch_usbserialv+0x48>)
 80a08b8:	4803      	ldr	r0, [pc, #12]	; (80a08c8 <_Z16_fetch_usbserialv+0x40>)
 80a08ba:	f000 fa81 	bl	80a0dc0 <__aeabi_atexit>
	return _usbserial;
}
 80a08be:	4802      	ldr	r0, [pc, #8]	; (80a08c8 <_Z16_fetch_usbserialv+0x40>)
 80a08c0:	b007      	add	sp, #28
 80a08c2:	bd30      	pop	{r4, r5, pc}
 80a08c4:	20000098 	.word	0x20000098
 80a08c8:	20000220 	.word	0x20000220
 80a08cc:	20000068 	.word	0x20000068
 80a08d0:	080a07ad 	.word	0x080a07ad

080a08d4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a08d4:	b510      	push	{r4, lr}
 80a08d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a08d8:	2214      	movs	r2, #20
 80a08da:	2100      	movs	r1, #0
 80a08dc:	f000 fbf3 	bl	80a10c6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a08e0:	4b05      	ldr	r3, [pc, #20]	; (80a08f8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a08e2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a08e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a08e6:	4b05      	ldr	r3, [pc, #20]	; (80a08fc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a08e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a08ea:	f240 1301 	movw	r3, #257	; 0x101
 80a08ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a08f0:	2381      	movs	r3, #129	; 0x81
 80a08f2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a08f4:	bd10      	pop	{r4, pc}
 80a08f6:	bf00      	nop
 80a08f8:	200002d0 	.word	0x200002d0
 80a08fc:	20000238 	.word	0x20000238

080a0900 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0900:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0902:	4c0e      	ldr	r4, [pc, #56]	; (80a093c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0904:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0906:	a801      	add	r0, sp, #4
 80a0908:	f7ff ffe4 	bl	80a08d4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a090c:	6823      	ldr	r3, [r4, #0]
 80a090e:	07db      	lsls	r3, r3, #31
 80a0910:	d410      	bmi.n	80a0934 <_Z17_fetch_usbserial1v+0x34>
 80a0912:	4620      	mov	r0, r4
 80a0914:	f7ff fbc3 	bl	80a009e <__cxa_guard_acquire>
 80a0918:	b160      	cbz	r0, 80a0934 <_Z17_fetch_usbserial1v+0x34>
 80a091a:	aa01      	add	r2, sp, #4
 80a091c:	2101      	movs	r1, #1
 80a091e:	4808      	ldr	r0, [pc, #32]	; (80a0940 <_Z17_fetch_usbserial1v+0x40>)
 80a0920:	f7ff ff84 	bl	80a082c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0924:	4620      	mov	r0, r4
 80a0926:	f7ff fbbf 	bl	80a00a8 <__cxa_guard_release>
 80a092a:	4a06      	ldr	r2, [pc, #24]	; (80a0944 <_Z17_fetch_usbserial1v+0x44>)
 80a092c:	4906      	ldr	r1, [pc, #24]	; (80a0948 <_Z17_fetch_usbserial1v+0x48>)
 80a092e:	4804      	ldr	r0, [pc, #16]	; (80a0940 <_Z17_fetch_usbserial1v+0x40>)
 80a0930:	f000 fa46 	bl	80a0dc0 <__aeabi_atexit>
  return _usbserial1;
}
 80a0934:	4802      	ldr	r0, [pc, #8]	; (80a0940 <_Z17_fetch_usbserial1v+0x40>)
 80a0936:	b006      	add	sp, #24
 80a0938:	bd10      	pop	{r4, pc}
 80a093a:	bf00      	nop
 80a093c:	20000234 	.word	0x20000234
 80a0940:	200002bc 	.word	0x200002bc
 80a0944:	20000068 	.word	0x20000068
 80a0948:	080a07ad 	.word	0x080a07ad

080a094c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a094c:	4770      	bx	lr

080a094e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a094e:	7441      	strb	r1, [r0, #17]
 80a0950:	4770      	bx	lr

080a0952 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0952:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0954:	7c00      	ldrb	r0, [r0, #16]
 80a0956:	f7ff fc51 	bl	80a01fc <HAL_USART_Available_Data_For_Write>
}
 80a095a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a095e:	bd08      	pop	{r3, pc}

080a0960 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0960:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0962:	7c00      	ldrb	r0, [r0, #16]
 80a0964:	f7ff fc22 	bl	80a01ac <HAL_USART_Available_Data>
}
 80a0968:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a096c:	bd08      	pop	{r3, pc}

080a096e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a096e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0970:	7c00      	ldrb	r0, [r0, #16]
 80a0972:	f7ff fc2b 	bl	80a01cc <HAL_USART_Peek_Data>
}
 80a0976:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a097a:	bf28      	it	cs
 80a097c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0980:	bd08      	pop	{r3, pc}

080a0982 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0982:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0984:	7c00      	ldrb	r0, [r0, #16]
 80a0986:	f7ff fc19 	bl	80a01bc <HAL_USART_Read_Data>
}
 80a098a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a098e:	bf28      	it	cs
 80a0990:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0994:	bd08      	pop	{r3, pc}

080a0996 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0996:	7c00      	ldrb	r0, [r0, #16]
 80a0998:	f7ff bc20 	b.w	80a01dc <HAL_USART_Flush_Data>

080a099c <_ZN11USARTSerialD0Ev>:
 80a099c:	b510      	push	{r4, lr}
 80a099e:	4604      	mov	r4, r0
 80a09a0:	2114      	movs	r1, #20
 80a09a2:	f000 fa1b 	bl	80a0ddc <_ZdlPvj>
 80a09a6:	4620      	mov	r0, r4
 80a09a8:	bd10      	pop	{r4, pc}

080a09aa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a09aa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a09ac:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a09ae:	4604      	mov	r4, r0
 80a09b0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a09b2:	b925      	cbnz	r5, 80a09be <_ZN11USARTSerial5writeEh+0x14>
 80a09b4:	7c00      	ldrb	r0, [r0, #16]
 80a09b6:	f7ff fc21 	bl	80a01fc <HAL_USART_Available_Data_For_Write>
 80a09ba:	2800      	cmp	r0, #0
 80a09bc:	dd05      	ble.n	80a09ca <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a09be:	4631      	mov	r1, r6
 80a09c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a09c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a09c6:	f7ff bbe9 	b.w	80a019c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a09ca:	4628      	mov	r0, r5
 80a09cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a09d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a09d0:	b510      	push	{r4, lr}
 80a09d2:	4604      	mov	r4, r0
 80a09d4:	4608      	mov	r0, r1
 80a09d6:	4611      	mov	r1, r2
 80a09d8:	2200      	movs	r2, #0
 80a09da:	6062      	str	r2, [r4, #4]
 80a09dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a09e0:	60a2      	str	r2, [r4, #8]
 80a09e2:	4a05      	ldr	r2, [pc, #20]	; (80a09f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a09e4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a09e6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a09e8:	2201      	movs	r2, #1
 80a09ea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a09ec:	461a      	mov	r2, r3
 80a09ee:	f7ff fbcd 	bl	80a018c <HAL_USART_Init>
}
 80a09f2:	4620      	mov	r0, r4
 80a09f4:	bd10      	pop	{r4, pc}
 80a09f6:	bf00      	nop
 80a09f8:	080a12a8 	.word	0x080a12a8

080a09fc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a09fc:	7c00      	ldrb	r0, [r0, #16]
 80a09fe:	f7ff bbf5 	b.w	80a01ec <HAL_USART_Is_Enabled>
	...

080a0a04 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0a04:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0a06:	4d0c      	ldr	r5, [pc, #48]	; (80a0a38 <_Z22__fetch_global_Serial1v+0x34>)
 80a0a08:	6829      	ldr	r1, [r5, #0]
 80a0a0a:	f011 0401 	ands.w	r4, r1, #1
 80a0a0e:	d111      	bne.n	80a0a34 <_Z22__fetch_global_Serial1v+0x30>
 80a0a10:	4628      	mov	r0, r5
 80a0a12:	f7ff fb44 	bl	80a009e <__cxa_guard_acquire>
 80a0a16:	b168      	cbz	r0, 80a0a34 <_Z22__fetch_global_Serial1v+0x30>
 80a0a18:	4a08      	ldr	r2, [pc, #32]	; (80a0a3c <_Z22__fetch_global_Serial1v+0x38>)
 80a0a1a:	4621      	mov	r1, r4
 80a0a1c:	4b08      	ldr	r3, [pc, #32]	; (80a0a40 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0a1e:	4809      	ldr	r0, [pc, #36]	; (80a0a44 <_Z22__fetch_global_Serial1v+0x40>)
 80a0a20:	f7ff ffd6 	bl	80a09d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0a24:	4628      	mov	r0, r5
 80a0a26:	f7ff fb3f 	bl	80a00a8 <__cxa_guard_release>
 80a0a2a:	4a07      	ldr	r2, [pc, #28]	; (80a0a48 <_Z22__fetch_global_Serial1v+0x44>)
 80a0a2c:	4907      	ldr	r1, [pc, #28]	; (80a0a4c <_Z22__fetch_global_Serial1v+0x48>)
 80a0a2e:	4805      	ldr	r0, [pc, #20]	; (80a0a44 <_Z22__fetch_global_Serial1v+0x40>)
 80a0a30:	f000 f9c6 	bl	80a0dc0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0a34:	4803      	ldr	r0, [pc, #12]	; (80a0a44 <_Z22__fetch_global_Serial1v+0x40>)
 80a0a36:	bd38      	pop	{r3, r4, r5, pc}
 80a0a38:	2000046c 	.word	0x2000046c
 80a0a3c:	20000470 	.word	0x20000470
 80a0a40:	200003e8 	.word	0x200003e8
 80a0a44:	200003d4 	.word	0x200003d4
 80a0a48:	20000068 	.word	0x20000068
 80a0a4c:	080a094d 	.word	0x080a094d

080a0a50 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a0a50:	4770      	bx	lr

080a0a52 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a54:	4606      	mov	r6, r0
 80a0a56:	4615      	mov	r5, r2
 80a0a58:	460c      	mov	r4, r1
 80a0a5a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0a5c:	42bc      	cmp	r4, r7
 80a0a5e:	d006      	beq.n	80a0a6e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0a60:	6833      	ldr	r3, [r6, #0]
 80a0a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0a66:	689b      	ldr	r3, [r3, #8]
 80a0a68:	4630      	mov	r0, r6
 80a0a6a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0a6c:	e7f6      	b.n	80a0a5c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0a6e:	4628      	mov	r0, r5
 80a0a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a72 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0a72:	2200      	movs	r2, #0
 80a0a74:	7c00      	ldrb	r0, [r0, #16]
 80a0a76:	f7ff bbc9 	b.w	80a020c <HAL_I2C_Write_Data>

080a0a7a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0a7a:	2100      	movs	r1, #0
 80a0a7c:	7c00      	ldrb	r0, [r0, #16]
 80a0a7e:	f7ff bbcd 	b.w	80a021c <HAL_I2C_Available_Data>

080a0a82 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0a82:	2100      	movs	r1, #0
 80a0a84:	7c00      	ldrb	r0, [r0, #16]
 80a0a86:	f7ff bbd1 	b.w	80a022c <HAL_I2C_Read_Data>

080a0a8a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0a8a:	2100      	movs	r1, #0
 80a0a8c:	7c00      	ldrb	r0, [r0, #16]
 80a0a8e:	f7ff bbd5 	b.w	80a023c <HAL_I2C_Peek_Data>

080a0a92 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0a92:	2100      	movs	r1, #0
 80a0a94:	7c00      	ldrb	r0, [r0, #16]
 80a0a96:	f7ff bbd9 	b.w	80a024c <HAL_I2C_Flush_Data>

080a0a9a <_ZN7TwoWireD0Ev>:
 80a0a9a:	b510      	push	{r4, lr}
 80a0a9c:	4604      	mov	r4, r0
 80a0a9e:	2114      	movs	r1, #20
 80a0aa0:	f000 f99c 	bl	80a0ddc <_ZdlPvj>
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	bd10      	pop	{r4, pc}

080a0aa8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0aa8:	b510      	push	{r4, lr}
 80a0aaa:	4604      	mov	r4, r0
 80a0aac:	2300      	movs	r3, #0
 80a0aae:	6063      	str	r3, [r4, #4]
 80a0ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ab4:	60a3      	str	r3, [r4, #8]
 80a0ab6:	4b04      	ldr	r3, [pc, #16]	; (80a0ac8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a0ab8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0aba:	4608      	mov	r0, r1
 80a0abc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a0abe:	4611      	mov	r1, r2
 80a0ac0:	f7ff fbd4 	bl	80a026c <HAL_I2C_Init>
}
 80a0ac4:	4620      	mov	r0, r4
 80a0ac6:	bd10      	pop	{r4, pc}
 80a0ac8:	080a12d8 	.word	0x080a12d8

080a0acc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0acc:	2100      	movs	r1, #0
 80a0ace:	7c00      	ldrb	r0, [r0, #16]
 80a0ad0:	f7ff bbc4 	b.w	80a025c <HAL_I2C_Is_Enabled>

080a0ad4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0ad4:	2200      	movs	r2, #0
 80a0ad6:	4611      	mov	r1, r2
 80a0ad8:	6840      	ldr	r0, [r0, #4]
 80a0ada:	f7ff bc4d 	b.w	80a0378 <network_ready>

080a0ade <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ae0:	4616      	mov	r6, r2
 80a0ae2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0ae4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0ae6:	460f      	mov	r7, r1
 80a0ae8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0aea:	2100      	movs	r1, #0
 80a0aec:	a803      	add	r0, sp, #12
 80a0aee:	f000 faea 	bl	80a10c6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0af2:	4630      	mov	r0, r6
 80a0af4:	f000 fb18 	bl	80a1128 <strlen>
 80a0af8:	2500      	movs	r5, #0
 80a0afa:	9500      	str	r5, [sp, #0]
 80a0afc:	b281      	uxth	r1, r0
 80a0afe:	687b      	ldr	r3, [r7, #4]
 80a0b00:	aa03      	add	r2, sp, #12
 80a0b02:	4630      	mov	r0, r6
 80a0b04:	f7ff fbf4 	bl	80a02f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0b08:	b120      	cbz	r0, 80a0b14 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0b0a:	4629      	mov	r1, r5
 80a0b0c:	4620      	mov	r0, r4
 80a0b0e:	f7ff fe29 	bl	80a0764 <_ZN9IPAddressC1Em>
 80a0b12:	e003      	b.n	80a0b1c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0b14:	a903      	add	r1, sp, #12
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	f7ff fe12 	bl	80a0740 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0b1c:	4620      	mov	r0, r4
 80a0b1e:	b009      	add	sp, #36	; 0x24
 80a0b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0b22 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0b22:	2200      	movs	r2, #0
 80a0b24:	4611      	mov	r1, r2
 80a0b26:	6840      	ldr	r0, [r0, #4]
 80a0b28:	f7ff bc46 	b.w	80a03b8 <network_listening>

080a0b2c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0b2c:	2200      	movs	r2, #0
 80a0b2e:	4611      	mov	r1, r2
 80a0b30:	6840      	ldr	r0, [r0, #4]
 80a0b32:	f7ff bc51 	b.w	80a03d8 <network_get_listen_timeout>

080a0b36 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0b36:	2200      	movs	r2, #0
 80a0b38:	6840      	ldr	r0, [r0, #4]
 80a0b3a:	f7ff bc45 	b.w	80a03c8 <network_set_listen_timeout>

080a0b3e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0b3e:	2200      	movs	r2, #0
 80a0b40:	f081 0101 	eor.w	r1, r1, #1
 80a0b44:	6840      	ldr	r0, [r0, #4]
 80a0b46:	f7ff bc2f 	b.w	80a03a8 <network_listen>

080a0b4a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0b4a:	2300      	movs	r3, #0
 80a0b4c:	461a      	mov	r2, r3
 80a0b4e:	4619      	mov	r1, r3
 80a0b50:	6840      	ldr	r0, [r0, #4]
 80a0b52:	f7ff bc21 	b.w	80a0398 <network_off>

080a0b56 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0b56:	2200      	movs	r2, #0
 80a0b58:	4611      	mov	r1, r2
 80a0b5a:	6840      	ldr	r0, [r0, #4]
 80a0b5c:	f7ff bbfc 	b.w	80a0358 <network_connecting>

080a0b60 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0b60:	2200      	movs	r2, #0
 80a0b62:	2102      	movs	r1, #2
 80a0b64:	6840      	ldr	r0, [r0, #4]
 80a0b66:	f7ff bbff 	b.w	80a0368 <network_disconnect>

080a0b6a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0b6a:	2300      	movs	r3, #0
 80a0b6c:	461a      	mov	r2, r3
 80a0b6e:	6840      	ldr	r0, [r0, #4]
 80a0b70:	f7ff bbea 	b.w	80a0348 <network_connect>

080a0b74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0b74:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0b76:	2204      	movs	r2, #4
 80a0b78:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0b7a:	4a02      	ldr	r2, [pc, #8]	; (80a0b84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0b7c:	601a      	str	r2, [r3, #0]
 80a0b7e:	4770      	bx	lr
 80a0b80:	200004f4 	.word	0x200004f4
 80a0b84:	080a1300 	.word	0x080a1300

080a0b88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0b88:	2300      	movs	r3, #0
 80a0b8a:	461a      	mov	r2, r3
 80a0b8c:	6840      	ldr	r0, [r0, #4]
 80a0b8e:	f7ff bbdb 	b.w	80a0348 <network_connect>

080a0b92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0b92:	2200      	movs	r2, #0
 80a0b94:	2102      	movs	r1, #2
 80a0b96:	6840      	ldr	r0, [r0, #4]
 80a0b98:	f7ff bbe6 	b.w	80a0368 <network_disconnect>

080a0b9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0b9c:	2200      	movs	r2, #0
 80a0b9e:	4611      	mov	r1, r2
 80a0ba0:	6840      	ldr	r0, [r0, #4]
 80a0ba2:	f7ff bbd9 	b.w	80a0358 <network_connecting>

080a0ba6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0ba6:	2200      	movs	r2, #0
 80a0ba8:	4611      	mov	r1, r2
 80a0baa:	6840      	ldr	r0, [r0, #4]
 80a0bac:	f7ff bbe4 	b.w	80a0378 <network_ready>

080a0bb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0bb0:	2300      	movs	r3, #0
 80a0bb2:	461a      	mov	r2, r3
 80a0bb4:	4619      	mov	r1, r3
 80a0bb6:	6840      	ldr	r0, [r0, #4]
 80a0bb8:	f7ff bbe6 	b.w	80a0388 <network_on>

080a0bbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0bbc:	2300      	movs	r3, #0
 80a0bbe:	461a      	mov	r2, r3
 80a0bc0:	4619      	mov	r1, r3
 80a0bc2:	6840      	ldr	r0, [r0, #4]
 80a0bc4:	f7ff bbe8 	b.w	80a0398 <network_off>

080a0bc8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0bc8:	2200      	movs	r2, #0
 80a0bca:	f081 0101 	eor.w	r1, r1, #1
 80a0bce:	6840      	ldr	r0, [r0, #4]
 80a0bd0:	f7ff bbea 	b.w	80a03a8 <network_listen>

080a0bd4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0bd4:	2200      	movs	r2, #0
 80a0bd6:	6840      	ldr	r0, [r0, #4]
 80a0bd8:	f7ff bbf6 	b.w	80a03c8 <network_set_listen_timeout>

080a0bdc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0bdc:	2200      	movs	r2, #0
 80a0bde:	4611      	mov	r1, r2
 80a0be0:	6840      	ldr	r0, [r0, #4]
 80a0be2:	f7ff bbf9 	b.w	80a03d8 <network_get_listen_timeout>

080a0be6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0be6:	2200      	movs	r2, #0
 80a0be8:	4611      	mov	r1, r2
 80a0bea:	6840      	ldr	r0, [r0, #4]
 80a0bec:	f7ff bbe4 	b.w	80a03b8 <network_listening>

080a0bf0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0bf0:	b570      	push	{r4, r5, r6, lr}
 80a0bf2:	4616      	mov	r6, r2
 80a0bf4:	b08e      	sub	sp, #56	; 0x38
 80a0bf6:	4604      	mov	r4, r0
    IPAddress addr;
 80a0bf8:	a808      	add	r0, sp, #32
 80a0bfa:	f7ff fd93 	bl	80a0724 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0bfe:	2211      	movs	r2, #17
 80a0c00:	2100      	movs	r1, #0
 80a0c02:	a803      	add	r0, sp, #12
 80a0c04:	f000 fa5f 	bl	80a10c6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0c08:	4630      	mov	r0, r6
 80a0c0a:	f000 fa8d 	bl	80a1128 <strlen>
 80a0c0e:	2500      	movs	r5, #0
 80a0c10:	4b0a      	ldr	r3, [pc, #40]	; (80a0c3c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0c12:	9500      	str	r5, [sp, #0]
 80a0c14:	b281      	uxth	r1, r0
 80a0c16:	685b      	ldr	r3, [r3, #4]
 80a0c18:	aa03      	add	r2, sp, #12
 80a0c1a:	4630      	mov	r0, r6
 80a0c1c:	f7ff fb68 	bl	80a02f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0c20:	b120      	cbz	r0, 80a0c2c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0c22:	4629      	mov	r1, r5
 80a0c24:	4620      	mov	r0, r4
 80a0c26:	f7ff fd9d 	bl	80a0764 <_ZN9IPAddressC1Em>
 80a0c2a:	e003      	b.n	80a0c34 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0c2c:	a903      	add	r1, sp, #12
 80a0c2e:	4620      	mov	r0, r4
 80a0c30:	f7ff fd86 	bl	80a0740 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0c34:	4620      	mov	r0, r4
 80a0c36:	b00e      	add	sp, #56	; 0x38
 80a0c38:	bd70      	pop	{r4, r5, r6, pc}
 80a0c3a:	bf00      	nop
 80a0c3c:	200004f4 	.word	0x200004f4

080a0c40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0c40:	4b02      	ldr	r3, [pc, #8]	; (80a0c4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0c42:	4a03      	ldr	r2, [pc, #12]	; (80a0c50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0c44:	601a      	str	r2, [r3, #0]
 80a0c46:	2200      	movs	r2, #0
 80a0c48:	605a      	str	r2, [r3, #4]
 80a0c4a:	4770      	bx	lr
 80a0c4c:	200004fc 	.word	0x200004fc
 80a0c50:	080a1334 	.word	0x080a1334

080a0c54 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a0c54:	b510      	push	{r4, lr}
 80a0c56:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0c58:	6880      	ldr	r0, [r0, #8]
 80a0c5a:	b108      	cbz	r0, 80a0c60 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0c5c:	f7ff fa8e 	bl	80a017c <os_mutex_recursive_destroy>
 80a0c60:	4620      	mov	r0, r4
 80a0c62:	bd10      	pop	{r4, pc}

080a0c64 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0c64:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0c66:	4e1a      	ldr	r6, [pc, #104]	; (80a0cd0 <pinAvailable+0x6c>)
 80a0c68:	4604      	mov	r4, r0
 80a0c6a:	6831      	ldr	r1, [r6, #0]
 80a0c6c:	f011 0501 	ands.w	r5, r1, #1
 80a0c70:	d10f      	bne.n	80a0c92 <pinAvailable+0x2e>
 80a0c72:	4630      	mov	r0, r6
 80a0c74:	f7ff fa13 	bl	80a009e <__cxa_guard_acquire>
 80a0c78:	b158      	cbz	r0, 80a0c92 <pinAvailable+0x2e>
 80a0c7a:	4629      	mov	r1, r5
 80a0c7c:	4815      	ldr	r0, [pc, #84]	; (80a0cd4 <pinAvailable+0x70>)
 80a0c7e:	f7ff fbcb 	bl	80a0418 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0c82:	4630      	mov	r0, r6
 80a0c84:	f7ff fa10 	bl	80a00a8 <__cxa_guard_release>
 80a0c88:	4a13      	ldr	r2, [pc, #76]	; (80a0cd8 <pinAvailable+0x74>)
 80a0c8a:	4914      	ldr	r1, [pc, #80]	; (80a0cdc <pinAvailable+0x78>)
 80a0c8c:	4811      	ldr	r0, [pc, #68]	; (80a0cd4 <pinAvailable+0x70>)
 80a0c8e:	f000 f897 	bl	80a0dc0 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a0c92:	4810      	ldr	r0, [pc, #64]	; (80a0cd4 <pinAvailable+0x70>)
 80a0c94:	f7ff fbcf 	bl	80a0436 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0c98:	b128      	cbz	r0, 80a0ca6 <pinAvailable+0x42>
 80a0c9a:	f1a4 030d 	sub.w	r3, r4, #13
 80a0c9e:	2b02      	cmp	r3, #2
 80a0ca0:	d801      	bhi.n	80a0ca6 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a0ca2:	2000      	movs	r0, #0
 80a0ca4:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0ca6:	f000 f865 	bl	80a0d74 <_Z19__fetch_global_Wirev>
 80a0caa:	f7ff ff0f 	bl	80a0acc <_ZN7TwoWire9isEnabledEv>
 80a0cae:	b108      	cbz	r0, 80a0cb4 <pinAvailable+0x50>
 80a0cb0:	2c01      	cmp	r4, #1
 80a0cb2:	d9f6      	bls.n	80a0ca2 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0cb4:	f7ff fea6 	bl	80a0a04 <_Z22__fetch_global_Serial1v>
 80a0cb8:	f7ff fea0 	bl	80a09fc <_ZN11USARTSerial9isEnabledEv>
 80a0cbc:	b118      	cbz	r0, 80a0cc6 <pinAvailable+0x62>
 80a0cbe:	f1a4 0312 	sub.w	r3, r4, #18
 80a0cc2:	2b01      	cmp	r3, #1
 80a0cc4:	d9ed      	bls.n	80a0ca2 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0cc6:	2c17      	cmp	r4, #23
 80a0cc8:	bf8c      	ite	hi
 80a0cca:	2000      	movhi	r0, #0
 80a0ccc:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0cce:	bd70      	pop	{r4, r5, r6, pc}
 80a0cd0:	20000504 	.word	0x20000504
 80a0cd4:	20000508 	.word	0x20000508
 80a0cd8:	20000068 	.word	0x20000068
 80a0cdc:	080a0c55 	.word	0x080a0c55

080a0ce0 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a0ce0:	b510      	push	{r4, lr}
 80a0ce2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a0ce4:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a0ce6:	bf9c      	itt	ls
 80a0ce8:	340a      	addls	r4, #10
 80a0cea:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0cec:	4620      	mov	r0, r4
 80a0cee:	f7ff ffb9 	bl	80a0c64 <pinAvailable>
 80a0cf2:	b150      	cbz	r0, 80a0d0a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a0cf4:	2103      	movs	r1, #3
 80a0cf6:	4620      	mov	r0, r4
 80a0cf8:	f7ff fa08 	bl	80a010c <HAL_Validate_Pin_Function>
 80a0cfc:	2803      	cmp	r0, #3
 80a0cfe:	d104      	bne.n	80a0d0a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a0d00:	4620      	mov	r0, r4
}
 80a0d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a0d06:	f7ff ba09 	b.w	80a011c <HAL_ADC_Read>
}
 80a0d0a:	2000      	movs	r0, #0
 80a0d0c:	bd10      	pop	{r4, pc}
	...

080a0d10 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0d10:	b513      	push	{r0, r1, r4, lr}
 80a0d12:	4c08      	ldr	r4, [pc, #32]	; (80a0d34 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0d14:	2300      	movs	r3, #0
 80a0d16:	461a      	mov	r2, r3
 80a0d18:	4619      	mov	r1, r3
 80a0d1a:	9300      	str	r3, [sp, #0]
 80a0d1c:	4620      	mov	r0, r4
 80a0d1e:	f7ff fd37 	bl	80a0790 <_ZN9IPAddressC1Ehhhh>
 80a0d22:	4620      	mov	r0, r4
 80a0d24:	4a04      	ldr	r2, [pc, #16]	; (80a0d38 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0d26:	4905      	ldr	r1, [pc, #20]	; (80a0d3c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0d28:	b002      	add	sp, #8
 80a0d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0d2e:	f000 b847 	b.w	80a0dc0 <__aeabi_atexit>
 80a0d32:	bf00      	nop
 80a0d34:	20000518 	.word	0x20000518
 80a0d38:	20000068 	.word	0x20000068
 80a0d3c:	080a06e1 	.word	0x080a06e1

080a0d40 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a0d40:	b570      	push	{r4, r5, r6, lr}
 80a0d42:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0d44:	2514      	movs	r5, #20
 80a0d46:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0d48:	4e09      	ldr	r6, [pc, #36]	; (80a0d70 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0d4a:	2100      	movs	r1, #0
 80a0d4c:	f000 f9bb 	bl	80a10c6 <memset>
 80a0d50:	8025      	strh	r5, [r4, #0]
 80a0d52:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0d54:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0d56:	60a5      	str	r5, [r4, #8]
 80a0d58:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0d5a:	4628      	mov	r0, r5
 80a0d5c:	f000 f840 	bl	80a0de0 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0d60:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0d62:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0d64:	4628      	mov	r0, r5
 80a0d66:	f000 f83b 	bl	80a0de0 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0d6a:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a0d6c:	4620      	mov	r0, r4
 80a0d6e:	bd70      	pop	{r4, r5, r6, pc}
 80a0d70:	080a1360 	.word	0x080a1360

080a0d74 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0d74:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0d76:	4d0e      	ldr	r5, [pc, #56]	; (80a0db0 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0d78:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0d7a:	6829      	ldr	r1, [r5, #0]
 80a0d7c:	f011 0401 	ands.w	r4, r1, #1
 80a0d80:	d113      	bne.n	80a0daa <_Z19__fetch_global_Wirev+0x36>
 80a0d82:	4628      	mov	r0, r5
 80a0d84:	f7ff f98b 	bl	80a009e <__cxa_guard_acquire>
 80a0d88:	b178      	cbz	r0, 80a0daa <_Z19__fetch_global_Wirev+0x36>
 80a0d8a:	a801      	add	r0, sp, #4
 80a0d8c:	f7ff ffd8 	bl	80a0d40 <_Z17acquireWireBufferv>
 80a0d90:	aa01      	add	r2, sp, #4
 80a0d92:	4621      	mov	r1, r4
 80a0d94:	4807      	ldr	r0, [pc, #28]	; (80a0db4 <_Z19__fetch_global_Wirev+0x40>)
 80a0d96:	f7ff fe87 	bl	80a0aa8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a0d9a:	4628      	mov	r0, r5
 80a0d9c:	f7ff f984 	bl	80a00a8 <__cxa_guard_release>
 80a0da0:	4a05      	ldr	r2, [pc, #20]	; (80a0db8 <_Z19__fetch_global_Wirev+0x44>)
 80a0da2:	4906      	ldr	r1, [pc, #24]	; (80a0dbc <_Z19__fetch_global_Wirev+0x48>)
 80a0da4:	4803      	ldr	r0, [pc, #12]	; (80a0db4 <_Z19__fetch_global_Wirev+0x40>)
 80a0da6:	f000 f80b 	bl	80a0dc0 <__aeabi_atexit>
	return wire;
}
 80a0daa:	4802      	ldr	r0, [pc, #8]	; (80a0db4 <_Z19__fetch_global_Wirev+0x40>)
 80a0dac:	b007      	add	sp, #28
 80a0dae:	bd30      	pop	{r4, r5, pc}
 80a0db0:	20000530 	.word	0x20000530
 80a0db4:	20000534 	.word	0x20000534
 80a0db8:	20000068 	.word	0x20000068
 80a0dbc:	080a0a51 	.word	0x080a0a51

080a0dc0 <__aeabi_atexit>:
 80a0dc0:	460b      	mov	r3, r1
 80a0dc2:	4601      	mov	r1, r0
 80a0dc4:	4618      	mov	r0, r3
 80a0dc6:	f000 b965 	b.w	80a1094 <__cxa_atexit>
	...

080a0dcc <_ZSt15get_new_handlerv>:
 80a0dcc:	4b02      	ldr	r3, [pc, #8]	; (80a0dd8 <_ZSt15get_new_handlerv+0xc>)
 80a0dce:	6818      	ldr	r0, [r3, #0]
 80a0dd0:	f3bf 8f5f 	dmb	sy
 80a0dd4:	4770      	bx	lr
 80a0dd6:	bf00      	nop
 80a0dd8:	20000548 	.word	0x20000548

080a0ddc <_ZdlPvj>:
 80a0ddc:	f7ff b95d 	b.w	80a009a <_ZdlPv>

080a0de0 <_ZnajRKSt9nothrow_t>:
 80a0de0:	f000 b800 	b.w	80a0de4 <_ZnwjRKSt9nothrow_t>

080a0de4 <_ZnwjRKSt9nothrow_t>:
 80a0de4:	b510      	push	{r4, lr}
 80a0de6:	2800      	cmp	r0, #0
 80a0de8:	bf14      	ite	ne
 80a0dea:	4604      	movne	r4, r0
 80a0dec:	2401      	moveq	r4, #1
 80a0dee:	4620      	mov	r0, r4
 80a0df0:	f7ff fb02 	bl	80a03f8 <malloc>
 80a0df4:	b920      	cbnz	r0, 80a0e00 <_ZnwjRKSt9nothrow_t+0x1c>
 80a0df6:	f7ff ffe9 	bl	80a0dcc <_ZSt15get_new_handlerv>
 80a0dfa:	b108      	cbz	r0, 80a0e00 <_ZnwjRKSt9nothrow_t+0x1c>
 80a0dfc:	4780      	blx	r0
 80a0dfe:	e7f6      	b.n	80a0dee <_ZnwjRKSt9nothrow_t+0xa>
 80a0e00:	bd10      	pop	{r4, pc}
	...

080a0e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0e04:	4b18      	ldr	r3, [pc, #96]	; (80a0e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0e06:	681a      	ldr	r2, [r3, #0]
 80a0e08:	07d1      	lsls	r1, r2, #31
 80a0e0a:	bf5c      	itt	pl
 80a0e0c:	2201      	movpl	r2, #1
 80a0e0e:	601a      	strpl	r2, [r3, #0]
 80a0e10:	4b16      	ldr	r3, [pc, #88]	; (80a0e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0e12:	681a      	ldr	r2, [r3, #0]
 80a0e14:	07d2      	lsls	r2, r2, #31
 80a0e16:	bf5c      	itt	pl
 80a0e18:	2201      	movpl	r2, #1
 80a0e1a:	601a      	strpl	r2, [r3, #0]
 80a0e1c:	4b14      	ldr	r3, [pc, #80]	; (80a0e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0e1e:	681a      	ldr	r2, [r3, #0]
 80a0e20:	07d0      	lsls	r0, r2, #31
 80a0e22:	bf5c      	itt	pl
 80a0e24:	2201      	movpl	r2, #1
 80a0e26:	601a      	strpl	r2, [r3, #0]
 80a0e28:	4b12      	ldr	r3, [pc, #72]	; (80a0e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0e2a:	681a      	ldr	r2, [r3, #0]
 80a0e2c:	07d1      	lsls	r1, r2, #31
 80a0e2e:	bf5c      	itt	pl
 80a0e30:	2201      	movpl	r2, #1
 80a0e32:	601a      	strpl	r2, [r3, #0]
 80a0e34:	4b10      	ldr	r3, [pc, #64]	; (80a0e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0e36:	681a      	ldr	r2, [r3, #0]
 80a0e38:	07d2      	lsls	r2, r2, #31
 80a0e3a:	bf5c      	itt	pl
 80a0e3c:	2201      	movpl	r2, #1
 80a0e3e:	601a      	strpl	r2, [r3, #0]
 80a0e40:	4b0e      	ldr	r3, [pc, #56]	; (80a0e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0e42:	681a      	ldr	r2, [r3, #0]
 80a0e44:	07d0      	lsls	r0, r2, #31
 80a0e46:	bf5c      	itt	pl
 80a0e48:	2201      	movpl	r2, #1
 80a0e4a:	601a      	strpl	r2, [r3, #0]
 80a0e4c:	4b0c      	ldr	r3, [pc, #48]	; (80a0e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0e4e:	681a      	ldr	r2, [r3, #0]
 80a0e50:	07d1      	lsls	r1, r2, #31
 80a0e52:	bf5c      	itt	pl
 80a0e54:	2201      	movpl	r2, #1
 80a0e56:	601a      	strpl	r2, [r3, #0]
 80a0e58:	4b0a      	ldr	r3, [pc, #40]	; (80a0e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0e5a:	681a      	ldr	r2, [r3, #0]
 80a0e5c:	07d2      	lsls	r2, r2, #31
 80a0e5e:	bf5c      	itt	pl
 80a0e60:	2201      	movpl	r2, #1
 80a0e62:	601a      	strpl	r2, [r3, #0]
 80a0e64:	4770      	bx	lr
 80a0e66:	bf00      	nop
 80a0e68:	20000568 	.word	0x20000568
 80a0e6c:	20000564 	.word	0x20000564
 80a0e70:	20000560 	.word	0x20000560
 80a0e74:	2000055c 	.word	0x2000055c
 80a0e78:	20000558 	.word	0x20000558
 80a0e7c:	20000554 	.word	0x20000554
 80a0e80:	20000550 	.word	0x20000550
 80a0e84:	2000054c 	.word	0x2000054c

080a0e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0e88:	4b24      	ldr	r3, [pc, #144]	; (80a0f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0e8a:	681a      	ldr	r2, [r3, #0]
 80a0e8c:	07d0      	lsls	r0, r2, #31
 80a0e8e:	bf5c      	itt	pl
 80a0e90:	2201      	movpl	r2, #1
 80a0e92:	601a      	strpl	r2, [r3, #0]
 80a0e94:	4b22      	ldr	r3, [pc, #136]	; (80a0f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0e96:	681a      	ldr	r2, [r3, #0]
 80a0e98:	07d1      	lsls	r1, r2, #31
 80a0e9a:	bf5c      	itt	pl
 80a0e9c:	2201      	movpl	r2, #1
 80a0e9e:	601a      	strpl	r2, [r3, #0]
 80a0ea0:	4b20      	ldr	r3, [pc, #128]	; (80a0f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0ea2:	681a      	ldr	r2, [r3, #0]
 80a0ea4:	07d2      	lsls	r2, r2, #31
 80a0ea6:	bf5c      	itt	pl
 80a0ea8:	2201      	movpl	r2, #1
 80a0eaa:	601a      	strpl	r2, [r3, #0]
 80a0eac:	4b1e      	ldr	r3, [pc, #120]	; (80a0f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0eae:	681a      	ldr	r2, [r3, #0]
 80a0eb0:	07d0      	lsls	r0, r2, #31
 80a0eb2:	bf5c      	itt	pl
 80a0eb4:	2201      	movpl	r2, #1
 80a0eb6:	601a      	strpl	r2, [r3, #0]
 80a0eb8:	4b1c      	ldr	r3, [pc, #112]	; (80a0f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0eba:	681a      	ldr	r2, [r3, #0]
 80a0ebc:	07d1      	lsls	r1, r2, #31
 80a0ebe:	bf5c      	itt	pl
 80a0ec0:	2201      	movpl	r2, #1
 80a0ec2:	601a      	strpl	r2, [r3, #0]
 80a0ec4:	4b1a      	ldr	r3, [pc, #104]	; (80a0f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0ec6:	681a      	ldr	r2, [r3, #0]
 80a0ec8:	07d2      	lsls	r2, r2, #31
 80a0eca:	bf5c      	itt	pl
 80a0ecc:	2201      	movpl	r2, #1
 80a0ece:	601a      	strpl	r2, [r3, #0]
 80a0ed0:	4b18      	ldr	r3, [pc, #96]	; (80a0f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0ed2:	681a      	ldr	r2, [r3, #0]
 80a0ed4:	07d0      	lsls	r0, r2, #31
 80a0ed6:	bf5c      	itt	pl
 80a0ed8:	2201      	movpl	r2, #1
 80a0eda:	601a      	strpl	r2, [r3, #0]
 80a0edc:	4b16      	ldr	r3, [pc, #88]	; (80a0f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0ede:	681a      	ldr	r2, [r3, #0]
 80a0ee0:	07d1      	lsls	r1, r2, #31
 80a0ee2:	bf5c      	itt	pl
 80a0ee4:	2201      	movpl	r2, #1
 80a0ee6:	601a      	strpl	r2, [r3, #0]
 80a0ee8:	4b14      	ldr	r3, [pc, #80]	; (80a0f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0eea:	681a      	ldr	r2, [r3, #0]
 80a0eec:	07d2      	lsls	r2, r2, #31
 80a0eee:	bf5c      	itt	pl
 80a0ef0:	2201      	movpl	r2, #1
 80a0ef2:	601a      	strpl	r2, [r3, #0]
 80a0ef4:	4b12      	ldr	r3, [pc, #72]	; (80a0f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0ef6:	681a      	ldr	r2, [r3, #0]
 80a0ef8:	07d0      	lsls	r0, r2, #31
 80a0efa:	bf5c      	itt	pl
 80a0efc:	2201      	movpl	r2, #1
 80a0efe:	601a      	strpl	r2, [r3, #0]
 80a0f00:	4b10      	ldr	r3, [pc, #64]	; (80a0f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0f02:	681a      	ldr	r2, [r3, #0]
 80a0f04:	07d1      	lsls	r1, r2, #31
 80a0f06:	bf5c      	itt	pl
 80a0f08:	2201      	movpl	r2, #1
 80a0f0a:	601a      	strpl	r2, [r3, #0]
 80a0f0c:	4b0e      	ldr	r3, [pc, #56]	; (80a0f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0f0e:	681a      	ldr	r2, [r3, #0]
 80a0f10:	07d2      	lsls	r2, r2, #31
 80a0f12:	bf5c      	itt	pl
 80a0f14:	2201      	movpl	r2, #1
 80a0f16:	601a      	strpl	r2, [r3, #0]
 80a0f18:	4770      	bx	lr
 80a0f1a:	bf00      	nop
 80a0f1c:	20000598 	.word	0x20000598
 80a0f20:	20000594 	.word	0x20000594
 80a0f24:	20000590 	.word	0x20000590
 80a0f28:	2000058c 	.word	0x2000058c
 80a0f2c:	20000588 	.word	0x20000588
 80a0f30:	20000584 	.word	0x20000584
 80a0f34:	20000580 	.word	0x20000580
 80a0f38:	2000057c 	.word	0x2000057c
 80a0f3c:	20000578 	.word	0x20000578
 80a0f40:	20000574 	.word	0x20000574
 80a0f44:	20000570 	.word	0x20000570
 80a0f48:	2000056c 	.word	0x2000056c

080a0f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0f4c:	4b24      	ldr	r3, [pc, #144]	; (80a0fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0f4e:	681a      	ldr	r2, [r3, #0]
 80a0f50:	07d0      	lsls	r0, r2, #31
 80a0f52:	bf5c      	itt	pl
 80a0f54:	2201      	movpl	r2, #1
 80a0f56:	601a      	strpl	r2, [r3, #0]
 80a0f58:	4b22      	ldr	r3, [pc, #136]	; (80a0fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0f5a:	681a      	ldr	r2, [r3, #0]
 80a0f5c:	07d1      	lsls	r1, r2, #31
 80a0f5e:	bf5c      	itt	pl
 80a0f60:	2201      	movpl	r2, #1
 80a0f62:	601a      	strpl	r2, [r3, #0]
 80a0f64:	4b20      	ldr	r3, [pc, #128]	; (80a0fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a0f66:	681a      	ldr	r2, [r3, #0]
 80a0f68:	07d2      	lsls	r2, r2, #31
 80a0f6a:	bf5c      	itt	pl
 80a0f6c:	2201      	movpl	r2, #1
 80a0f6e:	601a      	strpl	r2, [r3, #0]
 80a0f70:	4b1e      	ldr	r3, [pc, #120]	; (80a0fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a0f72:	681a      	ldr	r2, [r3, #0]
 80a0f74:	07d0      	lsls	r0, r2, #31
 80a0f76:	bf5c      	itt	pl
 80a0f78:	2201      	movpl	r2, #1
 80a0f7a:	601a      	strpl	r2, [r3, #0]
 80a0f7c:	4b1c      	ldr	r3, [pc, #112]	; (80a0ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a0f7e:	681a      	ldr	r2, [r3, #0]
 80a0f80:	07d1      	lsls	r1, r2, #31
 80a0f82:	bf5c      	itt	pl
 80a0f84:	2201      	movpl	r2, #1
 80a0f86:	601a      	strpl	r2, [r3, #0]
 80a0f88:	4b1a      	ldr	r3, [pc, #104]	; (80a0ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a0f8a:	681a      	ldr	r2, [r3, #0]
 80a0f8c:	07d2      	lsls	r2, r2, #31
 80a0f8e:	bf5c      	itt	pl
 80a0f90:	2201      	movpl	r2, #1
 80a0f92:	601a      	strpl	r2, [r3, #0]
 80a0f94:	4b18      	ldr	r3, [pc, #96]	; (80a0ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a0f96:	681a      	ldr	r2, [r3, #0]
 80a0f98:	07d0      	lsls	r0, r2, #31
 80a0f9a:	bf5c      	itt	pl
 80a0f9c:	2201      	movpl	r2, #1
 80a0f9e:	601a      	strpl	r2, [r3, #0]
 80a0fa0:	4b16      	ldr	r3, [pc, #88]	; (80a0ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a0fa2:	681a      	ldr	r2, [r3, #0]
 80a0fa4:	07d1      	lsls	r1, r2, #31
 80a0fa6:	bf5c      	itt	pl
 80a0fa8:	2201      	movpl	r2, #1
 80a0faa:	601a      	strpl	r2, [r3, #0]
 80a0fac:	4b14      	ldr	r3, [pc, #80]	; (80a1000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a0fae:	681a      	ldr	r2, [r3, #0]
 80a0fb0:	07d2      	lsls	r2, r2, #31
 80a0fb2:	bf5c      	itt	pl
 80a0fb4:	2201      	movpl	r2, #1
 80a0fb6:	601a      	strpl	r2, [r3, #0]
 80a0fb8:	4b12      	ldr	r3, [pc, #72]	; (80a1004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a0fba:	681a      	ldr	r2, [r3, #0]
 80a0fbc:	07d0      	lsls	r0, r2, #31
 80a0fbe:	bf5c      	itt	pl
 80a0fc0:	2201      	movpl	r2, #1
 80a0fc2:	601a      	strpl	r2, [r3, #0]
 80a0fc4:	4b10      	ldr	r3, [pc, #64]	; (80a1008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a0fc6:	681a      	ldr	r2, [r3, #0]
 80a0fc8:	07d1      	lsls	r1, r2, #31
 80a0fca:	bf5c      	itt	pl
 80a0fcc:	2201      	movpl	r2, #1
 80a0fce:	601a      	strpl	r2, [r3, #0]
 80a0fd0:	4b0e      	ldr	r3, [pc, #56]	; (80a100c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a0fd2:	681a      	ldr	r2, [r3, #0]
 80a0fd4:	07d2      	lsls	r2, r2, #31
 80a0fd6:	bf5c      	itt	pl
 80a0fd8:	2201      	movpl	r2, #1
 80a0fda:	601a      	strpl	r2, [r3, #0]
 80a0fdc:	4770      	bx	lr
 80a0fde:	bf00      	nop
 80a0fe0:	200005c8 	.word	0x200005c8
 80a0fe4:	200005c4 	.word	0x200005c4
 80a0fe8:	200005c0 	.word	0x200005c0
 80a0fec:	200005bc 	.word	0x200005bc
 80a0ff0:	200005b8 	.word	0x200005b8
 80a0ff4:	200005b4 	.word	0x200005b4
 80a0ff8:	200005b0 	.word	0x200005b0
 80a0ffc:	200005ac 	.word	0x200005ac
 80a1000:	200005a8 	.word	0x200005a8
 80a1004:	200005a4 	.word	0x200005a4
 80a1008:	200005a0 	.word	0x200005a0
 80a100c:	2000059c 	.word	0x2000059c

080a1010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1010:	4b18      	ldr	r3, [pc, #96]	; (80a1074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1012:	681a      	ldr	r2, [r3, #0]
 80a1014:	07d1      	lsls	r1, r2, #31
 80a1016:	bf5c      	itt	pl
 80a1018:	2201      	movpl	r2, #1
 80a101a:	601a      	strpl	r2, [r3, #0]
 80a101c:	4b16      	ldr	r3, [pc, #88]	; (80a1078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a101e:	681a      	ldr	r2, [r3, #0]
 80a1020:	07d2      	lsls	r2, r2, #31
 80a1022:	bf5c      	itt	pl
 80a1024:	2201      	movpl	r2, #1
 80a1026:	601a      	strpl	r2, [r3, #0]
 80a1028:	4b14      	ldr	r3, [pc, #80]	; (80a107c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a102a:	681a      	ldr	r2, [r3, #0]
 80a102c:	07d0      	lsls	r0, r2, #31
 80a102e:	bf5c      	itt	pl
 80a1030:	2201      	movpl	r2, #1
 80a1032:	601a      	strpl	r2, [r3, #0]
 80a1034:	4b12      	ldr	r3, [pc, #72]	; (80a1080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1036:	681a      	ldr	r2, [r3, #0]
 80a1038:	07d1      	lsls	r1, r2, #31
 80a103a:	bf5c      	itt	pl
 80a103c:	2201      	movpl	r2, #1
 80a103e:	601a      	strpl	r2, [r3, #0]
 80a1040:	4b10      	ldr	r3, [pc, #64]	; (80a1084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1042:	681a      	ldr	r2, [r3, #0]
 80a1044:	07d2      	lsls	r2, r2, #31
 80a1046:	bf5c      	itt	pl
 80a1048:	2201      	movpl	r2, #1
 80a104a:	601a      	strpl	r2, [r3, #0]
 80a104c:	4b0e      	ldr	r3, [pc, #56]	; (80a1088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a104e:	681a      	ldr	r2, [r3, #0]
 80a1050:	07d0      	lsls	r0, r2, #31
 80a1052:	bf5c      	itt	pl
 80a1054:	2201      	movpl	r2, #1
 80a1056:	601a      	strpl	r2, [r3, #0]
 80a1058:	4b0c      	ldr	r3, [pc, #48]	; (80a108c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a105a:	681a      	ldr	r2, [r3, #0]
 80a105c:	07d1      	lsls	r1, r2, #31
 80a105e:	bf5c      	itt	pl
 80a1060:	2201      	movpl	r2, #1
 80a1062:	601a      	strpl	r2, [r3, #0]
 80a1064:	4b0a      	ldr	r3, [pc, #40]	; (80a1090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1066:	681a      	ldr	r2, [r3, #0]
 80a1068:	07d2      	lsls	r2, r2, #31
 80a106a:	bf5c      	itt	pl
 80a106c:	2201      	movpl	r2, #1
 80a106e:	601a      	strpl	r2, [r3, #0]
 80a1070:	4770      	bx	lr
 80a1072:	bf00      	nop
 80a1074:	200005e8 	.word	0x200005e8
 80a1078:	200005e4 	.word	0x200005e4
 80a107c:	200005e0 	.word	0x200005e0
 80a1080:	200005dc 	.word	0x200005dc
 80a1084:	200005d8 	.word	0x200005d8
 80a1088:	200005d4 	.word	0x200005d4
 80a108c:	200005d0 	.word	0x200005d0
 80a1090:	200005cc 	.word	0x200005cc

080a1094 <__cxa_atexit>:
 80a1094:	b510      	push	{r4, lr}
 80a1096:	4c05      	ldr	r4, [pc, #20]	; (80a10ac <__cxa_atexit+0x18>)
 80a1098:	4613      	mov	r3, r2
 80a109a:	b12c      	cbz	r4, 80a10a8 <__cxa_atexit+0x14>
 80a109c:	460a      	mov	r2, r1
 80a109e:	4601      	mov	r1, r0
 80a10a0:	2002      	movs	r0, #2
 80a10a2:	f3af 8000 	nop.w
 80a10a6:	bd10      	pop	{r4, pc}
 80a10a8:	4620      	mov	r0, r4
 80a10aa:	bd10      	pop	{r4, pc}
 80a10ac:	00000000 	.word	0x00000000

080a10b0 <memcpy>:
 80a10b0:	b510      	push	{r4, lr}
 80a10b2:	1e43      	subs	r3, r0, #1
 80a10b4:	440a      	add	r2, r1
 80a10b6:	4291      	cmp	r1, r2
 80a10b8:	d004      	beq.n	80a10c4 <memcpy+0x14>
 80a10ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a10be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a10c2:	e7f8      	b.n	80a10b6 <memcpy+0x6>
 80a10c4:	bd10      	pop	{r4, pc}

080a10c6 <memset>:
 80a10c6:	4603      	mov	r3, r0
 80a10c8:	4402      	add	r2, r0
 80a10ca:	4293      	cmp	r3, r2
 80a10cc:	d002      	beq.n	80a10d4 <memset+0xe>
 80a10ce:	f803 1b01 	strb.w	r1, [r3], #1
 80a10d2:	e7fa      	b.n	80a10ca <memset+0x4>
 80a10d4:	4770      	bx	lr
	...

080a10d8 <srand>:
 80a10d8:	b538      	push	{r3, r4, r5, lr}
 80a10da:	4b12      	ldr	r3, [pc, #72]	; (80a1124 <srand+0x4c>)
 80a10dc:	4605      	mov	r5, r0
 80a10de:	681c      	ldr	r4, [r3, #0]
 80a10e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a10e2:	b9d3      	cbnz	r3, 80a111a <srand+0x42>
 80a10e4:	2018      	movs	r0, #24
 80a10e6:	f7ff f987 	bl	80a03f8 <malloc>
 80a10ea:	f243 330e 	movw	r3, #13070	; 0x330e
 80a10ee:	63a0      	str	r0, [r4, #56]	; 0x38
 80a10f0:	8003      	strh	r3, [r0, #0]
 80a10f2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a10f6:	8043      	strh	r3, [r0, #2]
 80a10f8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a10fc:	8083      	strh	r3, [r0, #4]
 80a10fe:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1102:	80c3      	strh	r3, [r0, #6]
 80a1104:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1108:	8103      	strh	r3, [r0, #8]
 80a110a:	2305      	movs	r3, #5
 80a110c:	8143      	strh	r3, [r0, #10]
 80a110e:	230b      	movs	r3, #11
 80a1110:	8183      	strh	r3, [r0, #12]
 80a1112:	2201      	movs	r2, #1
 80a1114:	2300      	movs	r3, #0
 80a1116:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a111a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a111c:	2200      	movs	r2, #0
 80a111e:	611d      	str	r5, [r3, #16]
 80a1120:	615a      	str	r2, [r3, #20]
 80a1122:	bd38      	pop	{r3, r4, r5, pc}
 80a1124:	20000064 	.word	0x20000064

080a1128 <strlen>:
 80a1128:	4603      	mov	r3, r0
 80a112a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a112e:	2a00      	cmp	r2, #0
 80a1130:	d1fb      	bne.n	80a112a <strlen+0x2>
 80a1132:	1a18      	subs	r0, r3, r0
 80a1134:	3801      	subs	r0, #1
 80a1136:	4770      	bx	lr

080a1138 <dynalib_user>:
 80a1138:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1148:	0000 0000 6162 6475 5300 7265 6169 006c     ....baud.Serial.
 80a1158:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80a1168:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 80a1178:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 80a1188:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 80a1198:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 80a11a8:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 80a11b8:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 80a11c8:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 80a11d8:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80a11e8:	6400 7465 6961 736c 3d20 0020 0a0d 6600     .details = ....f
 80a11f8:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a1208:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
 80a1218:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a1228:	696e 0063 6c61 006c 005a 2b25 3330 3a64     nic.all.Z.%+03d:
 80a1238:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1248:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1258:	0000 0000                                   ....

080a125c <_ZTV9IPAddress>:
	...
 80a1264:	06f1 080a 06e1 080a 06e3 080a               ............

080a1270 <_ZTV9USBSerial>:
	...
 80a1278:	07ad 080a 07fd 080a 080b 080a 0491 080a     ................
 80a1288:	07e9 080a 07af 080a 07c5 080a 07f7 080a     ................
 80a1298:	07db 080a 07a9 080a                         ........

080a12a0 <_ZTV11USARTSerial>:
	...
 80a12a8:	094d 080a 099d 080a 09ab 080a 0491 080a     M...............
 80a12b8:	0961 080a 0983 080a 096f 080a 0997 080a     a.......o.......
 80a12c8:	094f 080a 0953 080a                         O...S...

080a12d0 <_ZTV7TwoWire>:
	...
 80a12d8:	0a51 080a 0a9b 080a 0a73 080a 0a53 080a     Q.......s...S...
 80a12e8:	0a7b 080a 0a83 080a 0a8b 080a 0a93 080a     {...............

080a12f8 <_ZTVN5spark9WiFiClassE>:
	...
 80a1300:	0b6b 080a 0b61 080a 0b57 080a 0ad5 080a     k...a...W.......
 80a1310:	0539 080a 0b4b 080a 0b3f 080a 0b37 080a     9...K...?...7...
 80a1320:	0b2d 080a 0b23 080a 0adf 080a               -...#.......

080a132c <_ZTVN5spark12NetworkClassE>:
	...
 80a1334:	0b89 080a 0b93 080a 0b9d 080a 0ba7 080a     ................
 80a1344:	0bb1 080a 0bbd 080a 0bc9 080a 0bd5 080a     ................
 80a1354:	0bdd 080a 0be7 080a 0bf1 080a               ............

080a1360 <_ZSt7nothrow>:
 80a1360:	0000 0000                                   ....

080a1364 <__sf_fake_stdin>:
	...

080a1384 <__sf_fake_stdout>:
	...

080a13a4 <__sf_fake_stderr>:
	...
 80a13c4:	0043                                        C.

080a13c6 <link_const_variable_data_end>:
	...

080a13c8 <link_constructors_location>:
 80a13c8:	080a00f9 	.word	0x080a00f9
 80a13cc:	080a045d 	.word	0x080a045d
 80a13d0:	080a0545 	.word	0x080a0545
 80a13d4:	080a0555 	.word	0x080a0555
 80a13d8:	080a058d 	.word	0x080a058d
 80a13dc:	080a0b75 	.word	0x080a0b75
 80a13e0:	080a0c41 	.word	0x080a0c41
 80a13e4:	080a0d11 	.word	0x080a0d11
 80a13e8:	080a0e05 	.word	0x080a0e05
 80a13ec:	080a0e89 	.word	0x080a0e89
 80a13f0:	080a0f4d 	.word	0x080a0f4d
 80a13f4:	080a1011 	.word	0x080a1011

080a13f8 <link_constructors_end>:
	...
